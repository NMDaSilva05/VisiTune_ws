
DMATest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cfc  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004eb8  08004eb8  00005eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f28  08004f28  00006010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004f28  08004f28  00005f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f30  08004f30  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f30  08004f30  00005f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f34  08004f34  00005f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20040000  08004f38  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000918  20040010  08004f48  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20040928  08004f48  00006928  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd2b  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dc4  00000000  00000000  00013d6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  00015b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000081b  00000000  00000000  000165b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028713  00000000  00000000  00016dd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c6ff  00000000  00000000  0003f4e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f97c8  00000000  00000000  0004bbe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001453ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a94  00000000  00000000  001453f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00147e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20040010 	.word	0x20040010
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08004ea0 	.word	0x08004ea0

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20040014 	.word	0x20040014
 80001f8:	08004ea0 	.word	0x08004ea0

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000210:	f000 b988 	b.w	8000524 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	468e      	mov	lr, r1
 8000234:	4604      	mov	r4, r0
 8000236:	4688      	mov	r8, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d962      	bls.n	8000308 <__udivmoddi4+0xdc>
 8000242:	fab2 f682 	clz	r6, r2
 8000246:	b14e      	cbz	r6, 800025c <__udivmoddi4+0x30>
 8000248:	f1c6 0320 	rsb	r3, r6, #32
 800024c:	fa01 f806 	lsl.w	r8, r1, r6
 8000250:	fa20 f303 	lsr.w	r3, r0, r3
 8000254:	40b7      	lsls	r7, r6
 8000256:	ea43 0808 	orr.w	r8, r3, r8
 800025a:	40b4      	lsls	r4, r6
 800025c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000260:	fa1f fc87 	uxth.w	ip, r7
 8000264:	fbb8 f1fe 	udiv	r1, r8, lr
 8000268:	0c23      	lsrs	r3, r4, #16
 800026a:	fb0e 8811 	mls	r8, lr, r1, r8
 800026e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000272:	fb01 f20c 	mul.w	r2, r1, ip
 8000276:	429a      	cmp	r2, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x62>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000280:	f080 80ea 	bcs.w	8000458 <__udivmoddi4+0x22c>
 8000284:	429a      	cmp	r2, r3
 8000286:	f240 80e7 	bls.w	8000458 <__udivmoddi4+0x22c>
 800028a:	3902      	subs	r1, #2
 800028c:	443b      	add	r3, r7
 800028e:	1a9a      	subs	r2, r3, r2
 8000290:	b2a3      	uxth	r3, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800029e:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a2:	459c      	cmp	ip, r3
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0x8e>
 80002a6:	18fb      	adds	r3, r7, r3
 80002a8:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002ac:	f080 80d6 	bcs.w	800045c <__udivmoddi4+0x230>
 80002b0:	459c      	cmp	ip, r3
 80002b2:	f240 80d3 	bls.w	800045c <__udivmoddi4+0x230>
 80002b6:	443b      	add	r3, r7
 80002b8:	3802      	subs	r0, #2
 80002ba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002be:	eba3 030c 	sub.w	r3, r3, ip
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11d      	cbz	r5, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40f3      	lsrs	r3, r6
 80002c8:	2200      	movs	r2, #0
 80002ca:	e9c5 3200 	strd	r3, r2, [r5]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d905      	bls.n	80002e2 <__udivmoddi4+0xb6>
 80002d6:	b10d      	cbz	r5, 80002dc <__udivmoddi4+0xb0>
 80002d8:	e9c5 0100 	strd	r0, r1, [r5]
 80002dc:	2100      	movs	r1, #0
 80002de:	4608      	mov	r0, r1
 80002e0:	e7f5      	b.n	80002ce <__udivmoddi4+0xa2>
 80002e2:	fab3 f183 	clz	r1, r3
 80002e6:	2900      	cmp	r1, #0
 80002e8:	d146      	bne.n	8000378 <__udivmoddi4+0x14c>
 80002ea:	4573      	cmp	r3, lr
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xc8>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 8105 	bhi.w	80004fe <__udivmoddi4+0x2d2>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	4690      	mov	r8, r2
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e5      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000302:	e9c5 4800 	strd	r4, r8, [r5]
 8000306:	e7e2      	b.n	80002ce <__udivmoddi4+0xa2>
 8000308:	2a00      	cmp	r2, #0
 800030a:	f000 8090 	beq.w	800042e <__udivmoddi4+0x202>
 800030e:	fab2 f682 	clz	r6, r2
 8000312:	2e00      	cmp	r6, #0
 8000314:	f040 80a4 	bne.w	8000460 <__udivmoddi4+0x234>
 8000318:	1a8a      	subs	r2, r1, r2
 800031a:	0c03      	lsrs	r3, r0, #16
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	b280      	uxth	r0, r0
 8000322:	b2bc      	uxth	r4, r7
 8000324:	2101      	movs	r1, #1
 8000326:	fbb2 fcfe 	udiv	ip, r2, lr
 800032a:	fb0e 221c 	mls	r2, lr, ip, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb04 f20c 	mul.w	r2, r4, ip
 8000336:	429a      	cmp	r2, r3
 8000338:	d907      	bls.n	800034a <__udivmoddi4+0x11e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x11c>
 8000342:	429a      	cmp	r2, r3
 8000344:	f200 80e0 	bhi.w	8000508 <__udivmoddi4+0x2dc>
 8000348:	46c4      	mov	ip, r8
 800034a:	1a9b      	subs	r3, r3, r2
 800034c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000350:	fb0e 3312 	mls	r3, lr, r2, r3
 8000354:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000358:	fb02 f404 	mul.w	r4, r2, r4
 800035c:	429c      	cmp	r4, r3
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x144>
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x142>
 8000368:	429c      	cmp	r4, r3
 800036a:	f200 80ca 	bhi.w	8000502 <__udivmoddi4+0x2d6>
 800036e:	4602      	mov	r2, r0
 8000370:	1b1b      	subs	r3, r3, r4
 8000372:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000376:	e7a5      	b.n	80002c4 <__udivmoddi4+0x98>
 8000378:	f1c1 0620 	rsb	r6, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 f706 	lsr.w	r7, r2, r6
 8000382:	431f      	orrs	r7, r3
 8000384:	fa0e f401 	lsl.w	r4, lr, r1
 8000388:	fa20 f306 	lsr.w	r3, r0, r6
 800038c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000390:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	fa1f fc87 	uxth.w	ip, r7
 800039e:	fbbe f0f9 	udiv	r0, lr, r9
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	fb09 ee10 	mls	lr, r9, r0, lr
 80003a8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003ac:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	fa02 f201 	lsl.w	r2, r2, r1
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x1a0>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003be:	f080 809c 	bcs.w	80004fa <__udivmoddi4+0x2ce>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8099 	bls.w	80004fa <__udivmoddi4+0x2ce>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	fa1f fe83 	uxth.w	lr, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003e4:	45a4      	cmp	ip, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1ce>
 80003e8:	193c      	adds	r4, r7, r4
 80003ea:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ee:	f080 8082 	bcs.w	80004f6 <__udivmoddi4+0x2ca>
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d97f      	bls.n	80004f6 <__udivmoddi4+0x2ca>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	443c      	add	r4, r7
 80003fa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003fe:	eba4 040c 	sub.w	r4, r4, ip
 8000402:	fba0 ec02 	umull	lr, ip, r0, r2
 8000406:	4564      	cmp	r4, ip
 8000408:	4673      	mov	r3, lr
 800040a:	46e1      	mov	r9, ip
 800040c:	d362      	bcc.n	80004d4 <__udivmoddi4+0x2a8>
 800040e:	d05f      	beq.n	80004d0 <__udivmoddi4+0x2a4>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x1fe>
 8000412:	ebb8 0203 	subs.w	r2, r8, r3
 8000416:	eb64 0409 	sbc.w	r4, r4, r9
 800041a:	fa04 f606 	lsl.w	r6, r4, r6
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431e      	orrs	r6, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c5 6400 	strd	r6, r4, [r5]
 800042a:	2100      	movs	r1, #0
 800042c:	e74f      	b.n	80002ce <__udivmoddi4+0xa2>
 800042e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000432:	0c01      	lsrs	r1, r0, #16
 8000434:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000438:	b280      	uxth	r0, r0
 800043a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800043e:	463b      	mov	r3, r7
 8000440:	4638      	mov	r0, r7
 8000442:	463c      	mov	r4, r7
 8000444:	46b8      	mov	r8, r7
 8000446:	46be      	mov	lr, r7
 8000448:	2620      	movs	r6, #32
 800044a:	fbb1 f1f7 	udiv	r1, r1, r7
 800044e:	eba2 0208 	sub.w	r2, r2, r8
 8000452:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000456:	e766      	b.n	8000326 <__udivmoddi4+0xfa>
 8000458:	4601      	mov	r1, r0
 800045a:	e718      	b.n	800028e <__udivmoddi4+0x62>
 800045c:	4610      	mov	r0, r2
 800045e:	e72c      	b.n	80002ba <__udivmoddi4+0x8e>
 8000460:	f1c6 0220 	rsb	r2, r6, #32
 8000464:	fa2e f302 	lsr.w	r3, lr, r2
 8000468:	40b7      	lsls	r7, r6
 800046a:	40b1      	lsls	r1, r6
 800046c:	fa20 f202 	lsr.w	r2, r0, r2
 8000470:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000474:	430a      	orrs	r2, r1
 8000476:	fbb3 f8fe 	udiv	r8, r3, lr
 800047a:	b2bc      	uxth	r4, r7
 800047c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000480:	0c11      	lsrs	r1, r2, #16
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb08 f904 	mul.w	r9, r8, r4
 800048a:	40b0      	lsls	r0, r6
 800048c:	4589      	cmp	r9, r1
 800048e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000492:	b280      	uxth	r0, r0
 8000494:	d93e      	bls.n	8000514 <__udivmoddi4+0x2e8>
 8000496:	1879      	adds	r1, r7, r1
 8000498:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 800049c:	d201      	bcs.n	80004a2 <__udivmoddi4+0x276>
 800049e:	4589      	cmp	r9, r1
 80004a0:	d81f      	bhi.n	80004e2 <__udivmoddi4+0x2b6>
 80004a2:	eba1 0109 	sub.w	r1, r1, r9
 80004a6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004aa:	fb09 f804 	mul.w	r8, r9, r4
 80004ae:	fb0e 1119 	mls	r1, lr, r9, r1
 80004b2:	b292      	uxth	r2, r2
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	4542      	cmp	r2, r8
 80004ba:	d229      	bcs.n	8000510 <__udivmoddi4+0x2e4>
 80004bc:	18ba      	adds	r2, r7, r2
 80004be:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004c2:	d2c4      	bcs.n	800044e <__udivmoddi4+0x222>
 80004c4:	4542      	cmp	r2, r8
 80004c6:	d2c2      	bcs.n	800044e <__udivmoddi4+0x222>
 80004c8:	f1a9 0102 	sub.w	r1, r9, #2
 80004cc:	443a      	add	r2, r7
 80004ce:	e7be      	b.n	800044e <__udivmoddi4+0x222>
 80004d0:	45f0      	cmp	r8, lr
 80004d2:	d29d      	bcs.n	8000410 <__udivmoddi4+0x1e4>
 80004d4:	ebbe 0302 	subs.w	r3, lr, r2
 80004d8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004dc:	3801      	subs	r0, #1
 80004de:	46e1      	mov	r9, ip
 80004e0:	e796      	b.n	8000410 <__udivmoddi4+0x1e4>
 80004e2:	eba7 0909 	sub.w	r9, r7, r9
 80004e6:	4449      	add	r1, r9
 80004e8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004ec:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f0:	fb09 f804 	mul.w	r8, r9, r4
 80004f4:	e7db      	b.n	80004ae <__udivmoddi4+0x282>
 80004f6:	4673      	mov	r3, lr
 80004f8:	e77f      	b.n	80003fa <__udivmoddi4+0x1ce>
 80004fa:	4650      	mov	r0, sl
 80004fc:	e766      	b.n	80003cc <__udivmoddi4+0x1a0>
 80004fe:	4608      	mov	r0, r1
 8000500:	e6fd      	b.n	80002fe <__udivmoddi4+0xd2>
 8000502:	443b      	add	r3, r7
 8000504:	3a02      	subs	r2, #2
 8000506:	e733      	b.n	8000370 <__udivmoddi4+0x144>
 8000508:	f1ac 0c02 	sub.w	ip, ip, #2
 800050c:	443b      	add	r3, r7
 800050e:	e71c      	b.n	800034a <__udivmoddi4+0x11e>
 8000510:	4649      	mov	r1, r9
 8000512:	e79c      	b.n	800044e <__udivmoddi4+0x222>
 8000514:	eba1 0109 	sub.w	r1, r1, r9
 8000518:	46c4      	mov	ip, r8
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	e7c4      	b.n	80004ae <__udivmoddi4+0x282>

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */
uint8_t RxData[2048];
uint8_t script_send[1] = "S";
int index = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	index = (index + 1024) % 2048;
 8000530:	4b11      	ldr	r3, [pc, #68]	@ (8000578 <HAL_UART_RxCpltCallback+0x50>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000538:	425a      	negs	r2, r3
 800053a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800053e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000542:	bf58      	it	pl
 8000544:	4253      	negpl	r3, r2
 8000546:	4a0c      	ldr	r2, [pc, #48]	@ (8000578 <HAL_UART_RxCpltCallback+0x50>)
 8000548:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_DMA(&hlpuart1, RxData+index, 1024);
 800054a:	4b0b      	ldr	r3, [pc, #44]	@ (8000578 <HAL_UART_RxCpltCallback+0x50>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	461a      	mov	r2, r3
 8000550:	4b0a      	ldr	r3, [pc, #40]	@ (800057c <HAL_UART_RxCpltCallback+0x54>)
 8000552:	4413      	add	r3, r2
 8000554:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000558:	4619      	mov	r1, r3
 800055a:	4809      	ldr	r0, [pc, #36]	@ (8000580 <HAL_UART_RxCpltCallback+0x58>)
 800055c:	f003 f862 	bl	8003624 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit(&hlpuart1, script_send, 1, 1000);
 8000560:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000564:	2201      	movs	r2, #1
 8000566:	4907      	ldr	r1, [pc, #28]	@ (8000584 <HAL_UART_RxCpltCallback+0x5c>)
 8000568:	4805      	ldr	r0, [pc, #20]	@ (8000580 <HAL_UART_RxCpltCallback+0x58>)
 800056a:	f002 ffcd 	bl	8003508 <HAL_UART_Transmit>
}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	20040920 	.word	0x20040920
 800057c:	20040120 	.word	0x20040120
 8000580:	2004002c 	.word	0x2004002c
 8000584:	20040000 	.word	0x20040000

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058c:	f000 fc61 	bl	8000e52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000590:	f000 f812 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000594:	f000 f8cc 	bl	8000730 <MX_GPIO_Init>
  MX_DMA_Init();
 8000598:	f000 f8a0 	bl	80006dc <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800059c:	f000 f852 	bl	8000644 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&hlpuart1, RxData, 1024);
 80005a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005a4:	4902      	ldr	r1, [pc, #8]	@ (80005b0 <main+0x28>)
 80005a6:	4803      	ldr	r0, [pc, #12]	@ (80005b4 <main+0x2c>)
 80005a8:	f003 f83c 	bl	8003624 <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ac:	bf00      	nop
 80005ae:	e7fd      	b.n	80005ac <main+0x24>
 80005b0:	20040120 	.word	0x20040120
 80005b4:	2004002c 	.word	0x2004002c

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b096      	sub	sp, #88	@ 0x58
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	2244      	movs	r2, #68	@ 0x44
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f004 fc3e 	bl	8004e48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	463b      	mov	r3, r7
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005da:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005de:	f001 fa9f 	bl	8001b20 <HAL_PWREx_ControlVoltageScaling>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005e8:	f000 faf4 	bl	8000bd4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005ec:	2310      	movs	r3, #16
 80005ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005f0:	2301      	movs	r3, #1
 80005f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005f8:	2360      	movs	r3, #96	@ 0x60
 80005fa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005fc:	2300      	movs	r3, #0
 80005fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000600:	f107 0314 	add.w	r3, r7, #20
 8000604:	4618      	mov	r0, r3
 8000606:	f001 fb3f 	bl	8001c88 <HAL_RCC_OscConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000610:	f000 fae0 	bl	8000bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000614:	230f      	movs	r3, #15
 8000616:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000618:	2300      	movs	r3, #0
 800061a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000628:	463b      	mov	r3, r7
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f001 ff45 	bl	80024bc <HAL_RCC_ClockConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000638:	f000 facc 	bl	8000bd4 <Error_Handler>
  }
}
 800063c:	bf00      	nop
 800063e:	3758      	adds	r7, #88	@ 0x58
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000648:	4b22      	ldr	r3, [pc, #136]	@ (80006d4 <MX_LPUART1_UART_Init+0x90>)
 800064a:	4a23      	ldr	r2, [pc, #140]	@ (80006d8 <MX_LPUART1_UART_Init+0x94>)
 800064c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800064e:	4b21      	ldr	r3, [pc, #132]	@ (80006d4 <MX_LPUART1_UART_Init+0x90>)
 8000650:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000654:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000656:	4b1f      	ldr	r3, [pc, #124]	@ (80006d4 <MX_LPUART1_UART_Init+0x90>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800065c:	4b1d      	ldr	r3, [pc, #116]	@ (80006d4 <MX_LPUART1_UART_Init+0x90>)
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000662:	4b1c      	ldr	r3, [pc, #112]	@ (80006d4 <MX_LPUART1_UART_Init+0x90>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000668:	4b1a      	ldr	r3, [pc, #104]	@ (80006d4 <MX_LPUART1_UART_Init+0x90>)
 800066a:	220c      	movs	r2, #12
 800066c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800066e:	4b19      	ldr	r3, [pc, #100]	@ (80006d4 <MX_LPUART1_UART_Init+0x90>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000674:	4b17      	ldr	r3, [pc, #92]	@ (80006d4 <MX_LPUART1_UART_Init+0x90>)
 8000676:	2200      	movs	r2, #0
 8000678:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800067a:	4b16      	ldr	r3, [pc, #88]	@ (80006d4 <MX_LPUART1_UART_Init+0x90>)
 800067c:	2200      	movs	r2, #0
 800067e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000680:	4b14      	ldr	r3, [pc, #80]	@ (80006d4 <MX_LPUART1_UART_Init+0x90>)
 8000682:	2200      	movs	r2, #0
 8000684:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000686:	4b13      	ldr	r3, [pc, #76]	@ (80006d4 <MX_LPUART1_UART_Init+0x90>)
 8000688:	2200      	movs	r2, #0
 800068a:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800068c:	4811      	ldr	r0, [pc, #68]	@ (80006d4 <MX_LPUART1_UART_Init+0x90>)
 800068e:	f002 feeb 	bl	8003468 <HAL_UART_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000698:	f000 fa9c 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800069c:	2100      	movs	r1, #0
 800069e:	480d      	ldr	r0, [pc, #52]	@ (80006d4 <MX_LPUART1_UART_Init+0x90>)
 80006a0:	f004 fb08 	bl	8004cb4 <HAL_UARTEx_SetTxFifoThreshold>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80006aa:	f000 fa93 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006ae:	2100      	movs	r1, #0
 80006b0:	4808      	ldr	r0, [pc, #32]	@ (80006d4 <MX_LPUART1_UART_Init+0x90>)
 80006b2:	f004 fb3d 	bl	8004d30 <HAL_UARTEx_SetRxFifoThreshold>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80006bc:	f000 fa8a 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80006c0:	4804      	ldr	r0, [pc, #16]	@ (80006d4 <MX_LPUART1_UART_Init+0x90>)
 80006c2:	f004 fabe 	bl	8004c42 <HAL_UARTEx_DisableFifoMode>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80006cc:	f000 fa82 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	2004002c 	.word	0x2004002c
 80006d8:	40008000 	.word	0x40008000

080006dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80006e2:	4b12      	ldr	r3, [pc, #72]	@ (800072c <MX_DMA_Init+0x50>)
 80006e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006e6:	4a11      	ldr	r2, [pc, #68]	@ (800072c <MX_DMA_Init+0x50>)
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	6493      	str	r3, [r2, #72]	@ 0x48
 80006ee:	4b0f      	ldr	r3, [pc, #60]	@ (800072c <MX_DMA_Init+0x50>)
 80006f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006f2:	f003 0304 	and.w	r3, r3, #4
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006fa:	4b0c      	ldr	r3, [pc, #48]	@ (800072c <MX_DMA_Init+0x50>)
 80006fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006fe:	4a0b      	ldr	r2, [pc, #44]	@ (800072c <MX_DMA_Init+0x50>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	6493      	str	r3, [r2, #72]	@ 0x48
 8000706:	4b09      	ldr	r3, [pc, #36]	@ (800072c <MX_DMA_Init+0x50>)
 8000708:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	603b      	str	r3, [r7, #0]
 8000710:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	2100      	movs	r1, #0
 8000716:	200b      	movs	r0, #11
 8000718:	f000 fceb 	bl	80010f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800071c:	200b      	movs	r0, #11
 800071e:	f000 fd04 	bl	800112a <HAL_NVIC_EnableIRQ>

}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40021000 	.word	0x40021000

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08e      	sub	sp, #56	@ 0x38
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000746:	4bb2      	ldr	r3, [pc, #712]	@ (8000a10 <MX_GPIO_Init+0x2e0>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074a:	4ab1      	ldr	r2, [pc, #708]	@ (8000a10 <MX_GPIO_Init+0x2e0>)
 800074c:	f043 0310 	orr.w	r3, r3, #16
 8000750:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000752:	4baf      	ldr	r3, [pc, #700]	@ (8000a10 <MX_GPIO_Init+0x2e0>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000756:	f003 0310 	and.w	r3, r3, #16
 800075a:	623b      	str	r3, [r7, #32]
 800075c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	4bac      	ldr	r3, [pc, #688]	@ (8000a10 <MX_GPIO_Init+0x2e0>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000762:	4aab      	ldr	r2, [pc, #684]	@ (8000a10 <MX_GPIO_Init+0x2e0>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800076a:	4ba9      	ldr	r3, [pc, #676]	@ (8000a10 <MX_GPIO_Init+0x2e0>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	61fb      	str	r3, [r7, #28]
 8000774:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000776:	4ba6      	ldr	r3, [pc, #664]	@ (8000a10 <MX_GPIO_Init+0x2e0>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077a:	4aa5      	ldr	r2, [pc, #660]	@ (8000a10 <MX_GPIO_Init+0x2e0>)
 800077c:	f043 0320 	orr.w	r3, r3, #32
 8000780:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000782:	4ba3      	ldr	r3, [pc, #652]	@ (8000a10 <MX_GPIO_Init+0x2e0>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000786:	f003 0320 	and.w	r3, r3, #32
 800078a:	61bb      	str	r3, [r7, #24]
 800078c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078e:	4ba0      	ldr	r3, [pc, #640]	@ (8000a10 <MX_GPIO_Init+0x2e0>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000792:	4a9f      	ldr	r2, [pc, #636]	@ (8000a10 <MX_GPIO_Init+0x2e0>)
 8000794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000798:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800079a:	4b9d      	ldr	r3, [pc, #628]	@ (8000a10 <MX_GPIO_Init+0x2e0>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	4b9a      	ldr	r3, [pc, #616]	@ (8000a10 <MX_GPIO_Init+0x2e0>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007aa:	4a99      	ldr	r2, [pc, #612]	@ (8000a10 <MX_GPIO_Init+0x2e0>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007b2:	4b97      	ldr	r3, [pc, #604]	@ (8000a10 <MX_GPIO_Init+0x2e0>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	4b94      	ldr	r3, [pc, #592]	@ (8000a10 <MX_GPIO_Init+0x2e0>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c2:	4a93      	ldr	r2, [pc, #588]	@ (8000a10 <MX_GPIO_Init+0x2e0>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ca:	4b91      	ldr	r3, [pc, #580]	@ (8000a10 <MX_GPIO_Init+0x2e0>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d6:	4b8e      	ldr	r3, [pc, #568]	@ (8000a10 <MX_GPIO_Init+0x2e0>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007da:	4a8d      	ldr	r2, [pc, #564]	@ (8000a10 <MX_GPIO_Init+0x2e0>)
 80007dc:	f043 0308 	orr.w	r3, r3, #8
 80007e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007e2:	4b8b      	ldr	r3, [pc, #556]	@ (8000a10 <MX_GPIO_Init+0x2e0>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e6:	f003 0308 	and.w	r3, r3, #8
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ee:	4b88      	ldr	r3, [pc, #544]	@ (8000a10 <MX_GPIO_Init+0x2e0>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f2:	4a87      	ldr	r2, [pc, #540]	@ (8000a10 <MX_GPIO_Init+0x2e0>)
 80007f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007fa:	4b85      	ldr	r3, [pc, #532]	@ (8000a10 <MX_GPIO_Init+0x2e0>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000806:	f001 fa2f 	bl	8001c68 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800080a:	230c      	movs	r3, #12
 800080c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080e:	2302      	movs	r3, #2
 8000810:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800081a:	230d      	movs	r3, #13
 800081c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800081e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000822:	4619      	mov	r1, r3
 8000824:	487b      	ldr	r0, [pc, #492]	@ (8000a14 <MX_GPIO_Init+0x2e4>)
 8000826:	f000 ffc9 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800082a:	2307      	movs	r3, #7
 800082c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800082e:	2312      	movs	r3, #18
 8000830:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000836:	2303      	movs	r3, #3
 8000838:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800083a:	2304      	movs	r3, #4
 800083c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800083e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000842:	4619      	mov	r1, r3
 8000844:	4874      	ldr	r0, [pc, #464]	@ (8000a18 <MX_GPIO_Init+0x2e8>)
 8000846:	f000 ffb9 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800084a:	2380      	movs	r3, #128	@ 0x80
 800084c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	2302      	movs	r3, #2
 8000850:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800085a:	230d      	movs	r3, #13
 800085c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800085e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000862:	4619      	mov	r1, r3
 8000864:	486c      	ldr	r0, [pc, #432]	@ (8000a18 <MX_GPIO_Init+0x2e8>)
 8000866:	f000 ffa9 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800086a:	233f      	movs	r3, #63	@ 0x3f
 800086c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800086e:	230b      	movs	r3, #11
 8000870:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000876:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800087a:	4619      	mov	r1, r3
 800087c:	4867      	ldr	r0, [pc, #412]	@ (8000a1c <MX_GPIO_Init+0x2ec>)
 800087e:	f000 ff9d 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000882:	2301      	movs	r3, #1
 8000884:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000892:	2301      	movs	r3, #1
 8000894:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000896:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800089a:	4619      	mov	r1, r3
 800089c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008a0:	f000 ff8c 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008a4:	2302      	movs	r3, #2
 80008a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80008a8:	230b      	movs	r3, #11
 80008aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b4:	4619      	mov	r1, r3
 80008b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ba:	f000 ff7f 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008be:	230c      	movs	r3, #12
 80008c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	2302      	movs	r3, #2
 80008c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ca:	2303      	movs	r3, #3
 80008cc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008ce:	2307      	movs	r3, #7
 80008d0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008d6:	4619      	mov	r1, r3
 80008d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008dc:	f000 ff6e 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008e0:	23f0      	movs	r3, #240	@ 0xf0
 80008e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e4:	2302      	movs	r3, #2
 80008e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ec:	2303      	movs	r3, #3
 80008ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008f0:	2305      	movs	r3, #5
 80008f2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008f8:	4619      	mov	r1, r3
 80008fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008fe:	f000 ff5d 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000902:	2301      	movs	r3, #1
 8000904:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000912:	2302      	movs	r3, #2
 8000914:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000916:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800091a:	4619      	mov	r1, r3
 800091c:	4840      	ldr	r0, [pc, #256]	@ (8000a20 <MX_GPIO_Init+0x2f0>)
 800091e:	f000 ff4d 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000922:	2302      	movs	r3, #2
 8000924:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000926:	230b      	movs	r3, #11
 8000928:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000932:	4619      	mov	r1, r3
 8000934:	483a      	ldr	r0, [pc, #232]	@ (8000a20 <MX_GPIO_Init+0x2f0>)
 8000936:	f000 ff41 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 800093a:	2344      	movs	r3, #68	@ 0x44
 800093c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800093e:	2303      	movs	r3, #3
 8000940:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000946:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800094a:	4619      	mov	r1, r3
 800094c:	4834      	ldr	r0, [pc, #208]	@ (8000a20 <MX_GPIO_Init+0x2f0>)
 800094e:	f000 ff35 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000952:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 8000956:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000964:	2301      	movs	r3, #1
 8000966:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000968:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800096c:	4619      	mov	r1, r3
 800096e:	4829      	ldr	r0, [pc, #164]	@ (8000a14 <MX_GPIO_Init+0x2e4>)
 8000970:	f000 ff24 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000974:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000978:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8000986:	2303      	movs	r3, #3
 8000988:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800098a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800098e:	4619      	mov	r1, r3
 8000990:	4820      	ldr	r0, [pc, #128]	@ (8000a14 <MX_GPIO_Init+0x2e4>)
 8000992:	f000 ff13 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000996:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800099a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099c:	2302      	movs	r3, #2
 800099e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80009a8:	2301      	movs	r3, #1
 80009aa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009b0:	4619      	mov	r1, r3
 80009b2:	481b      	ldr	r0, [pc, #108]	@ (8000a20 <MX_GPIO_Init+0x2f0>)
 80009b4:	f000 ff02 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80009b8:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80009bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80009ca:	230d      	movs	r3, #13
 80009cc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009d2:	4619      	mov	r1, r3
 80009d4:	4812      	ldr	r0, [pc, #72]	@ (8000a20 <MX_GPIO_Init+0x2f0>)
 80009d6:	f000 fef1 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80009da:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80009de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	2302      	movs	r3, #2
 80009e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80009ec:	230e      	movs	r3, #14
 80009ee:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009f4:	4619      	mov	r1, r3
 80009f6:	480a      	ldr	r0, [pc, #40]	@ (8000a20 <MX_GPIO_Init+0x2f0>)
 80009f8:	f000 fee0 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009fc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	2302      	movs	r3, #2
 8000a04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8000a0e:	e009      	b.n	8000a24 <MX_GPIO_Init+0x2f4>
 8000a10:	40021000 	.word	0x40021000
 8000a14:	48001000 	.word	0x48001000
 8000a18:	48001400 	.word	0x48001400
 8000a1c:	48000800 	.word	0x48000800
 8000a20:	48000400 	.word	0x48000400
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a24:	2307      	movs	r3, #7
 8000a26:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4865      	ldr	r0, [pc, #404]	@ (8000bc4 <MX_GPIO_Init+0x494>)
 8000a30:	f000 fec4 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000a34:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000a38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000a46:	2302      	movs	r3, #2
 8000a48:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a4e:	4619      	mov	r1, r3
 8000a50:	485c      	ldr	r0, [pc, #368]	@ (8000bc4 <MX_GPIO_Init+0x494>)
 8000a52:	f000 feb3 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a56:	2340      	movs	r3, #64	@ 0x40
 8000a58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000a66:	230d      	movs	r3, #13
 8000a68:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4855      	ldr	r0, [pc, #340]	@ (8000bc8 <MX_GPIO_Init+0x498>)
 8000a72:	f000 fea3 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a76:	2380      	movs	r3, #128	@ 0x80
 8000a78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000a86:	2302      	movs	r3, #2
 8000a88:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a8e:	4619      	mov	r1, r3
 8000a90:	484d      	ldr	r0, [pc, #308]	@ (8000bc8 <MX_GPIO_Init+0x498>)
 8000a92:	f000 fe93 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000a96:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000a9a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000aa8:	230c      	movs	r3, #12
 8000aaa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4845      	ldr	r0, [pc, #276]	@ (8000bc8 <MX_GPIO_Init+0x498>)
 8000ab4:	f000 fe82 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000ab8:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000abc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000aca:	230a      	movs	r3, #10
 8000acc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ace:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad8:	f000 fe70 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000adc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ae0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aee:	4619      	mov	r1, r3
 8000af0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af4:	f000 fe62 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000af8:	2301      	movs	r3, #1
 8000afa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b04:	2303      	movs	r3, #3
 8000b06:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b08:	2309      	movs	r3, #9
 8000b0a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b10:	4619      	mov	r1, r3
 8000b12:	482c      	ldr	r0, [pc, #176]	@ (8000bc4 <MX_GPIO_Init+0x494>)
 8000b14:	f000 fe52 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b18:	2304      	movs	r3, #4
 8000b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b24:	2303      	movs	r3, #3
 8000b26:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000b28:	230c      	movs	r3, #12
 8000b2a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b30:	4619      	mov	r1, r3
 8000b32:	4824      	ldr	r0, [pc, #144]	@ (8000bc4 <MX_GPIO_Init+0x494>)
 8000b34:	f000 fe42 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000b38:	2318      	movs	r3, #24
 8000b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b44:	2303      	movs	r3, #3
 8000b46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b48:	2307      	movs	r3, #7
 8000b4a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b50:	4619      	mov	r1, r3
 8000b52:	481c      	ldr	r0, [pc, #112]	@ (8000bc4 <MX_GPIO_Init+0x494>)
 8000b54:	f000 fe32 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000b58:	2338      	movs	r3, #56	@ 0x38
 8000b5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b64:	2303      	movs	r3, #3
 8000b66:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b68:	2306      	movs	r3, #6
 8000b6a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b70:	4619      	mov	r1, r3
 8000b72:	4816      	ldr	r0, [pc, #88]	@ (8000bcc <MX_GPIO_Init+0x49c>)
 8000b74:	f000 fe22 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b78:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b7e:	2312      	movs	r3, #18
 8000b80:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b86:	2303      	movs	r3, #3
 8000b88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b92:	4619      	mov	r1, r3
 8000b94:	480d      	ldr	r0, [pc, #52]	@ (8000bcc <MX_GPIO_Init+0x49c>)
 8000b96:	f000 fe11 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000baa:	2302      	movs	r3, #2
 8000bac:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4806      	ldr	r0, [pc, #24]	@ (8000bd0 <MX_GPIO_Init+0x4a0>)
 8000bb6:	f000 fe01 	bl	80017bc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000bba:	bf00      	nop
 8000bbc:	3738      	adds	r7, #56	@ 0x38
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	48000c00 	.word	0x48000c00
 8000bc8:	48000800 	.word	0x48000800
 8000bcc:	48000400 	.word	0x48000400
 8000bd0:	48001000 	.word	0x48001000

08000bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd8:	b672      	cpsid	i
}
 8000bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <Error_Handler+0x8>

08000be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be6:	4b0f      	ldr	r3, [pc, #60]	@ (8000c24 <HAL_MspInit+0x44>)
 8000be8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bea:	4a0e      	ldr	r2, [pc, #56]	@ (8000c24 <HAL_MspInit+0x44>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <HAL_MspInit+0x44>)
 8000bf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfe:	4b09      	ldr	r3, [pc, #36]	@ (8000c24 <HAL_MspInit+0x44>)
 8000c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c02:	4a08      	ldr	r2, [pc, #32]	@ (8000c24 <HAL_MspInit+0x44>)
 8000c04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c08:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c0a:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <HAL_MspInit+0x44>)
 8000c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	40021000 	.word	0x40021000

08000c28 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b0ae      	sub	sp, #184	@ 0xb8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c40:	f107 0310 	add.w	r3, r7, #16
 8000c44:	2294      	movs	r2, #148	@ 0x94
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f004 f8fd 	bl	8004e48 <memset>
  if(huart->Instance==LPUART1)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a3b      	ldr	r2, [pc, #236]	@ (8000d40 <HAL_UART_MspInit+0x118>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d16f      	bne.n	8000d38 <HAL_UART_MspInit+0x110>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000c58:	2320      	movs	r3, #32
 8000c5a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c60:	f107 0310 	add.w	r3, r7, #16
 8000c64:	4618      	mov	r0, r3
 8000c66:	f001 fee7 	bl	8002a38 <HAL_RCCEx_PeriphCLKConfig>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c70:	f7ff ffb0 	bl	8000bd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c74:	4b33      	ldr	r3, [pc, #204]	@ (8000d44 <HAL_UART_MspInit+0x11c>)
 8000c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c78:	4a32      	ldr	r2, [pc, #200]	@ (8000d44 <HAL_UART_MspInit+0x11c>)
 8000c7a:	f043 0301 	orr.w	r3, r3, #1
 8000c7e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000c80:	4b30      	ldr	r3, [pc, #192]	@ (8000d44 <HAL_UART_MspInit+0x11c>)
 8000c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c84:	f003 0301 	and.w	r3, r3, #1
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c8c:	4b2d      	ldr	r3, [pc, #180]	@ (8000d44 <HAL_UART_MspInit+0x11c>)
 8000c8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c90:	4a2c      	ldr	r2, [pc, #176]	@ (8000d44 <HAL_UART_MspInit+0x11c>)
 8000c92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c98:	4b2a      	ldr	r3, [pc, #168]	@ (8000d44 <HAL_UART_MspInit+0x11c>)
 8000c9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000ca4:	f000 ffe0 	bl	8001c68 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000ca8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000cac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000cc2:	2308      	movs	r3, #8
 8000cc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cc8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ccc:	4619      	mov	r1, r3
 8000cce:	481e      	ldr	r0, [pc, #120]	@ (8000d48 <HAL_UART_MspInit+0x120>)
 8000cd0:	f000 fd74 	bl	80017bc <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d4c <HAL_UART_MspInit+0x124>)
 8000cd6:	4a1e      	ldr	r2, [pc, #120]	@ (8000d50 <HAL_UART_MspInit+0x128>)
 8000cd8:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000cda:	4b1c      	ldr	r3, [pc, #112]	@ (8000d4c <HAL_UART_MspInit+0x124>)
 8000cdc:	2222      	movs	r2, #34	@ 0x22
 8000cde:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d4c <HAL_UART_MspInit+0x124>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ce6:	4b19      	ldr	r3, [pc, #100]	@ (8000d4c <HAL_UART_MspInit+0x124>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cec:	4b17      	ldr	r3, [pc, #92]	@ (8000d4c <HAL_UART_MspInit+0x124>)
 8000cee:	2280      	movs	r2, #128	@ 0x80
 8000cf0:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cf2:	4b16      	ldr	r3, [pc, #88]	@ (8000d4c <HAL_UART_MspInit+0x124>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cf8:	4b14      	ldr	r3, [pc, #80]	@ (8000d4c <HAL_UART_MspInit+0x124>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8000cfe:	4b13      	ldr	r3, [pc, #76]	@ (8000d4c <HAL_UART_MspInit+0x124>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d04:	4b11      	ldr	r3, [pc, #68]	@ (8000d4c <HAL_UART_MspInit+0x124>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000d0a:	4810      	ldr	r0, [pc, #64]	@ (8000d4c <HAL_UART_MspInit+0x124>)
 8000d0c:	f000 fa28 	bl	8001160 <HAL_DMA_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 8000d16:	f7ff ff5d 	bl	8000bd4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a0b      	ldr	r2, [pc, #44]	@ (8000d4c <HAL_UART_MspInit+0x124>)
 8000d1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000d22:	4a0a      	ldr	r2, [pc, #40]	@ (8000d4c <HAL_UART_MspInit+0x124>)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	2046      	movs	r0, #70	@ 0x46
 8000d2e:	f000 f9e0 	bl	80010f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000d32:	2046      	movs	r0, #70	@ 0x46
 8000d34:	f000 f9f9 	bl	800112a <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8000d38:	bf00      	nop
 8000d3a:	37b8      	adds	r7, #184	@ 0xb8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40008000 	.word	0x40008000
 8000d44:	40021000 	.word	0x40021000
 8000d48:	48001800 	.word	0x48001800
 8000d4c:	200400c0 	.word	0x200400c0
 8000d50:	40020008 	.word	0x40020008

08000d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <NMI_Handler+0x4>

08000d5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <HardFault_Handler+0x4>

08000d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <MemManage_Handler+0x4>

08000d6c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <BusFault_Handler+0x4>

08000d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <UsageFault_Handler+0x4>

08000d7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000daa:	f000 f8a7 	bl	8000efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000db8:	4802      	ldr	r0, [pc, #8]	@ (8000dc4 <DMA1_Channel1_IRQHandler+0x10>)
 8000dba:	f000 fbaf 	bl	800151c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200400c0 	.word	0x200400c0

08000dc8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000dcc:	4802      	ldr	r0, [pc, #8]	@ (8000dd8 <LPUART1_IRQHandler+0x10>)
 8000dce:	f002 fc75 	bl	80036bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	2004002c 	.word	0x2004002c

08000ddc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000de0:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <SystemInit+0x20>)
 8000de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000de6:	4a05      	ldr	r2, [pc, #20]	@ (8000dfc <SystemInit+0x20>)
 8000de8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e04:	f7ff ffea 	bl	8000ddc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e08:	480c      	ldr	r0, [pc, #48]	@ (8000e3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e0a:	490d      	ldr	r1, [pc, #52]	@ (8000e40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e44 <LoopForever+0xe>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e10:	e002      	b.n	8000e18 <LoopCopyDataInit>

08000e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e16:	3304      	adds	r3, #4

08000e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e1c:	d3f9      	bcc.n	8000e12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e20:	4c0a      	ldr	r4, [pc, #40]	@ (8000e4c <LoopForever+0x16>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e24:	e001      	b.n	8000e2a <LoopFillZerobss>

08000e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e28:	3204      	adds	r2, #4

08000e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e2c:	d3fb      	bcc.n	8000e26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e2e:	f004 f813 	bl	8004e58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e32:	f7ff fba9 	bl	8000588 <main>

08000e36 <LoopForever>:

LoopForever:
    b LoopForever
 8000e36:	e7fe      	b.n	8000e36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e38:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000e3c:	20040000 	.word	0x20040000
  ldr r1, =_edata
 8000e40:	20040010 	.word	0x20040010
  ldr r2, =_sidata
 8000e44:	08004f38 	.word	0x08004f38
  ldr r2, =_sbss
 8000e48:	20040010 	.word	0x20040010
  ldr r4, =_ebss
 8000e4c:	20040928 	.word	0x20040928

08000e50 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e50:	e7fe      	b.n	8000e50 <ADC1_IRQHandler>

08000e52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e5c:	2003      	movs	r0, #3
 8000e5e:	f000 f93d 	bl	80010dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e62:	2000      	movs	r0, #0
 8000e64:	f000 f80e 	bl	8000e84 <HAL_InitTick>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d002      	beq.n	8000e74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	71fb      	strb	r3, [r7, #7]
 8000e72:	e001      	b.n	8000e78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e74:	f7ff feb4 	bl	8000be0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e78:	79fb      	ldrb	r3, [r7, #7]
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e90:	4b17      	ldr	r3, [pc, #92]	@ (8000ef0 <HAL_InitTick+0x6c>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d023      	beq.n	8000ee0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e98:	4b16      	ldr	r3, [pc, #88]	@ (8000ef4 <HAL_InitTick+0x70>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b14      	ldr	r3, [pc, #80]	@ (8000ef0 <HAL_InitTick+0x6c>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 f949 	bl	8001146 <HAL_SYSTICK_Config>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d10f      	bne.n	8000eda <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2b0f      	cmp	r3, #15
 8000ebe:	d809      	bhi.n	8000ed4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	6879      	ldr	r1, [r7, #4]
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ec8:	f000 f913 	bl	80010f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ecc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef8 <HAL_InitTick+0x74>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6013      	str	r3, [r2, #0]
 8000ed2:	e007      	b.n	8000ee4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	73fb      	strb	r3, [r7, #15]
 8000ed8:	e004      	b.n	8000ee4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	73fb      	strb	r3, [r7, #15]
 8000ede:	e001      	b.n	8000ee4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	2004000c 	.word	0x2004000c
 8000ef4:	20040004 	.word	0x20040004
 8000ef8:	20040008 	.word	0x20040008

08000efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f00:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <HAL_IncTick+0x20>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <HAL_IncTick+0x24>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	4a04      	ldr	r2, [pc, #16]	@ (8000f20 <HAL_IncTick+0x24>)
 8000f0e:	6013      	str	r3, [r2, #0]
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	2004000c 	.word	0x2004000c
 8000f20:	20040924 	.word	0x20040924

08000f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return uwTick;
 8000f28:	4b03      	ldr	r3, [pc, #12]	@ (8000f38 <HAL_GetTick+0x14>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20040924 	.word	0x20040924

08000f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6e:	4a04      	ldr	r2, [pc, #16]	@ (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	60d3      	str	r3, [r2, #12]
}
 8000f74:	bf00      	nop
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f88:	4b04      	ldr	r3, [pc, #16]	@ (8000f9c <__NVIC_GetPriorityGrouping+0x18>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	f003 0307 	and.w	r3, r3, #7
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	db0b      	blt.n	8000fca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	f003 021f 	and.w	r2, r3, #31
 8000fb8:	4907      	ldr	r1, [pc, #28]	@ (8000fd8 <__NVIC_EnableIRQ+0x38>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	095b      	lsrs	r3, r3, #5
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000e100 	.word	0xe000e100

08000fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	db0a      	blt.n	8001006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	490c      	ldr	r1, [pc, #48]	@ (8001028 <__NVIC_SetPriority+0x4c>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	0112      	lsls	r2, r2, #4
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	440b      	add	r3, r1
 8001000:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001004:	e00a      	b.n	800101c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4908      	ldr	r1, [pc, #32]	@ (800102c <__NVIC_SetPriority+0x50>)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	3b04      	subs	r3, #4
 8001014:	0112      	lsls	r2, r2, #4
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	440b      	add	r3, r1
 800101a:	761a      	strb	r2, [r3, #24]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000e100 	.word	0xe000e100
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	@ 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f1c3 0307 	rsb	r3, r3, #7
 800104a:	2b04      	cmp	r3, #4
 800104c:	bf28      	it	cs
 800104e:	2304      	movcs	r3, #4
 8001050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3304      	adds	r3, #4
 8001056:	2b06      	cmp	r3, #6
 8001058:	d902      	bls.n	8001060 <NVIC_EncodePriority+0x30>
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3b03      	subs	r3, #3
 800105e:	e000      	b.n	8001062 <NVIC_EncodePriority+0x32>
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43da      	mvns	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	401a      	ands	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001078:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa01 f303 	lsl.w	r3, r1, r3
 8001082:	43d9      	mvns	r1, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	4313      	orrs	r3, r2
         );
}
 800108a:	4618      	mov	r0, r3
 800108c:	3724      	adds	r7, #36	@ 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010a8:	d301      	bcc.n	80010ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00f      	b.n	80010ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ae:	4a0a      	ldr	r2, [pc, #40]	@ (80010d8 <SysTick_Config+0x40>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b6:	210f      	movs	r1, #15
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010bc:	f7ff ff8e 	bl	8000fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c0:	4b05      	ldr	r3, [pc, #20]	@ (80010d8 <SysTick_Config+0x40>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c6:	4b04      	ldr	r3, [pc, #16]	@ (80010d8 <SysTick_Config+0x40>)
 80010c8:	2207      	movs	r2, #7
 80010ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	e000e010 	.word	0xe000e010

080010dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff29 	bl	8000f3c <__NVIC_SetPriorityGrouping>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001104:	f7ff ff3e 	bl	8000f84 <__NVIC_GetPriorityGrouping>
 8001108:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	68b9      	ldr	r1, [r7, #8]
 800110e:	6978      	ldr	r0, [r7, #20]
 8001110:	f7ff ff8e 	bl	8001030 <NVIC_EncodePriority>
 8001114:	4602      	mov	r2, r0
 8001116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff5d 	bl	8000fdc <__NVIC_SetPriority>
}
 8001122:	bf00      	nop
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff31 	bl	8000fa0 <__NVIC_EnableIRQ>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ffa2 	bl	8001098 <SysTick_Config>
 8001154:	4603      	mov	r3, r0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d101      	bne.n	8001172 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e08d      	b.n	800128e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	461a      	mov	r2, r3
 8001178:	4b47      	ldr	r3, [pc, #284]	@ (8001298 <HAL_DMA_Init+0x138>)
 800117a:	429a      	cmp	r2, r3
 800117c:	d80f      	bhi.n	800119e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	461a      	mov	r2, r3
 8001184:	4b45      	ldr	r3, [pc, #276]	@ (800129c <HAL_DMA_Init+0x13c>)
 8001186:	4413      	add	r3, r2
 8001188:	4a45      	ldr	r2, [pc, #276]	@ (80012a0 <HAL_DMA_Init+0x140>)
 800118a:	fba2 2303 	umull	r2, r3, r2, r3
 800118e:	091b      	lsrs	r3, r3, #4
 8001190:	009a      	lsls	r2, r3, #2
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a42      	ldr	r2, [pc, #264]	@ (80012a4 <HAL_DMA_Init+0x144>)
 800119a:	641a      	str	r2, [r3, #64]	@ 0x40
 800119c:	e00e      	b.n	80011bc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	461a      	mov	r2, r3
 80011a4:	4b40      	ldr	r3, [pc, #256]	@ (80012a8 <HAL_DMA_Init+0x148>)
 80011a6:	4413      	add	r3, r2
 80011a8:	4a3d      	ldr	r2, [pc, #244]	@ (80012a0 <HAL_DMA_Init+0x140>)
 80011aa:	fba2 2303 	umull	r2, r3, r2, r3
 80011ae:	091b      	lsrs	r3, r3, #4
 80011b0:	009a      	lsls	r2, r3, #2
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a3c      	ldr	r2, [pc, #240]	@ (80012ac <HAL_DMA_Init+0x14c>)
 80011ba:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2202      	movs	r2, #2
 80011c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80011d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80011d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80011e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a1b      	ldr	r3, [r3, #32]
 80011fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	4313      	orrs	r3, r2
 8001204:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f000 fa72 	bl	80016f8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800121c:	d102      	bne.n	8001224 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001238:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d010      	beq.n	8001264 <HAL_DMA_Init+0x104>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b04      	cmp	r3, #4
 8001248:	d80c      	bhi.n	8001264 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f000 fa92 	bl	8001774 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	e008      	b.n	8001276 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2201      	movs	r2, #1
 8001280:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40020407 	.word	0x40020407
 800129c:	bffdfff8 	.word	0xbffdfff8
 80012a0:	cccccccd 	.word	0xcccccccd
 80012a4:	40020000 	.word	0x40020000
 80012a8:	bffdfbf8 	.word	0xbffdfbf8
 80012ac:	40020400 	.word	0x40020400

080012b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
 80012bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012be:	2300      	movs	r3, #0
 80012c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d101      	bne.n	80012d0 <HAL_DMA_Start_IT+0x20>
 80012cc:	2302      	movs	r3, #2
 80012ce:	e066      	b.n	800139e <HAL_DMA_Start_IT+0xee>
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2201      	movs	r2, #1
 80012d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d155      	bne.n	8001390 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2202      	movs	r2, #2
 80012e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2200      	movs	r2, #0
 80012f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f022 0201 	bic.w	r2, r2, #1
 8001300:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	68b9      	ldr	r1, [r7, #8]
 8001308:	68f8      	ldr	r0, [r7, #12]
 800130a:	f000 f9b6 	bl	800167a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001312:	2b00      	cmp	r3, #0
 8001314:	d008      	beq.n	8001328 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f042 020e 	orr.w	r2, r2, #14
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	e00f      	b.n	8001348 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 0204 	bic.w	r2, r2, #4
 8001336:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f042 020a 	orr.w	r2, r2, #10
 8001346:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d007      	beq.n	8001366 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001360:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001364:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800136a:	2b00      	cmp	r3, #0
 800136c:	d007      	beq.n	800137e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001378:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800137c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f042 0201 	orr.w	r2, r2, #1
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	e005      	b.n	800139c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001398:	2302      	movs	r3, #2
 800139a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800139c:	7dfb      	ldrb	r3, [r7, #23]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b085      	sub	sp, #20
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013ae:	2300      	movs	r3, #0
 80013b0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d008      	beq.n	80013d0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2204      	movs	r2, #4
 80013c2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e040      	b.n	8001452 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f022 020e 	bic.w	r2, r2, #14
 80013de:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013ea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80013ee:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 0201 	bic.w	r2, r2, #1
 80013fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001404:	f003 021c 	and.w	r2, r3, #28
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140c:	2101      	movs	r1, #1
 800140e:	fa01 f202 	lsl.w	r2, r1, r2
 8001412:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800141c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00c      	beq.n	8001440 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001430:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001434:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800143e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001450:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001452:	4618      	mov	r0, r3
 8001454:	3714      	adds	r7, #20
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b084      	sub	sp, #16
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001466:	2300      	movs	r3, #0
 8001468:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d005      	beq.n	8001482 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2204      	movs	r2, #4
 800147a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	73fb      	strb	r3, [r7, #15]
 8001480:	e047      	b.n	8001512 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f022 020e 	bic.w	r2, r2, #14
 8001490:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f022 0201 	bic.w	r2, r2, #1
 80014a0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80014b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014b6:	f003 021c 	and.w	r2, r3, #28
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014be:	2101      	movs	r1, #1
 80014c0:	fa01 f202 	lsl.w	r2, r1, r2
 80014c4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80014ce:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d00c      	beq.n	80014f2 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014e2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80014e6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80014f0:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2201      	movs	r2, #1
 80014f6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	4798      	blx	r3
    }
  }
  return status;
 8001512:	7bfb      	ldrb	r3, [r7, #15]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001538:	f003 031c 	and.w	r3, r3, #28
 800153c:	2204      	movs	r2, #4
 800153e:	409a      	lsls	r2, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4013      	ands	r3, r2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d026      	beq.n	8001596 <HAL_DMA_IRQHandler+0x7a>
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	2b00      	cmp	r3, #0
 8001550:	d021      	beq.n	8001596 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0320 	and.w	r3, r3, #32
 800155c:	2b00      	cmp	r3, #0
 800155e:	d107      	bne.n	8001570 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f022 0204 	bic.w	r2, r2, #4
 800156e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001574:	f003 021c 	and.w	r2, r3, #28
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157c:	2104      	movs	r1, #4
 800157e:	fa01 f202 	lsl.w	r2, r1, r2
 8001582:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001588:	2b00      	cmp	r3, #0
 800158a:	d071      	beq.n	8001670 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001594:	e06c      	b.n	8001670 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159a:	f003 031c 	and.w	r3, r3, #28
 800159e:	2202      	movs	r2, #2
 80015a0:	409a      	lsls	r2, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4013      	ands	r3, r2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d02e      	beq.n	8001608 <HAL_DMA_IRQHandler+0xec>
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d029      	beq.n	8001608 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0320 	and.w	r3, r3, #32
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d10b      	bne.n	80015da <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 020a 	bic.w	r2, r2, #10
 80015d0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015de:	f003 021c 	and.w	r2, r3, #28
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e6:	2102      	movs	r1, #2
 80015e8:	fa01 f202 	lsl.w	r2, r1, r2
 80015ec:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d038      	beq.n	8001670 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001606:	e033      	b.n	8001670 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160c:	f003 031c 	and.w	r3, r3, #28
 8001610:	2208      	movs	r2, #8
 8001612:	409a      	lsls	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4013      	ands	r3, r2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d02a      	beq.n	8001672 <HAL_DMA_IRQHandler+0x156>
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	2b00      	cmp	r3, #0
 8001624:	d025      	beq.n	8001672 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 020e 	bic.w	r2, r2, #14
 8001634:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163a:	f003 021c 	and.w	r2, r3, #28
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001642:	2101      	movs	r1, #1
 8001644:	fa01 f202 	lsl.w	r2, r1, r2
 8001648:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2201      	movs	r2, #1
 800164e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001664:	2b00      	cmp	r3, #0
 8001666:	d004      	beq.n	8001672 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001670:	bf00      	nop
 8001672:	bf00      	nop
}
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800167a:	b480      	push	{r7}
 800167c:	b085      	sub	sp, #20
 800167e:	af00      	add	r7, sp, #0
 8001680:	60f8      	str	r0, [r7, #12]
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
 8001686:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168c:	68fa      	ldr	r2, [r7, #12]
 800168e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001690:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001696:	2b00      	cmp	r3, #0
 8001698:	d004      	beq.n	80016a4 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80016a2:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a8:	f003 021c 	and.w	r2, r3, #28
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b0:	2101      	movs	r1, #1
 80016b2:	fa01 f202 	lsl.w	r2, r1, r2
 80016b6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	2b10      	cmp	r3, #16
 80016c6:	d108      	bne.n	80016da <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	68ba      	ldr	r2, [r7, #8]
 80016d6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80016d8:	e007      	b.n	80016ea <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	60da      	str	r2, [r3, #12]
}
 80016ea:	bf00      	nop
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
	...

080016f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	461a      	mov	r2, r3
 8001706:	4b17      	ldr	r3, [pc, #92]	@ (8001764 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001708:	429a      	cmp	r2, r3
 800170a:	d80a      	bhi.n	8001722 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001710:	089b      	lsrs	r3, r3, #2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001718:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	6493      	str	r3, [r2, #72]	@ 0x48
 8001720:	e007      	b.n	8001732 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001726:	089b      	lsrs	r3, r3, #2
 8001728:	009a      	lsls	r2, r3, #2
 800172a:	4b0f      	ldr	r3, [pc, #60]	@ (8001768 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800172c:	4413      	add	r3, r2
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	b2db      	uxtb	r3, r3
 8001738:	3b08      	subs	r3, #8
 800173a:	4a0c      	ldr	r2, [pc, #48]	@ (800176c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800173c:	fba2 2303 	umull	r2, r3, r2, r3
 8001740:	091b      	lsrs	r3, r3, #4
 8001742:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a0a      	ldr	r2, [pc, #40]	@ (8001770 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001748:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f003 031f 	and.w	r3, r3, #31
 8001750:	2201      	movs	r2, #1
 8001752:	409a      	lsls	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001758:	bf00      	nop
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	40020407 	.word	0x40020407
 8001768:	4002081c 	.word	0x4002081c
 800176c:	cccccccd 	.word	0xcccccccd
 8001770:	40020880 	.word	0x40020880

08001774 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001784:	68fa      	ldr	r2, [r7, #12]
 8001786:	4b0b      	ldr	r3, [pc, #44]	@ (80017b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001788:	4413      	add	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	461a      	mov	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a08      	ldr	r2, [pc, #32]	@ (80017b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001796:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	3b01      	subs	r3, #1
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	2201      	movs	r2, #1
 80017a2:	409a      	lsls	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80017a8:	bf00      	nop
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	1000823f 	.word	0x1000823f
 80017b8:	40020940 	.word	0x40020940

080017bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017bc:	b480      	push	{r7}
 80017be:	b087      	sub	sp, #28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ca:	e166      	b.n	8001a9a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	2101      	movs	r1, #1
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	fa01 f303 	lsl.w	r3, r1, r3
 80017d8:	4013      	ands	r3, r2
 80017da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 8158 	beq.w	8001a94 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d005      	beq.n	80017fc <HAL_GPIO_Init+0x40>
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f003 0303 	and.w	r3, r3, #3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d130      	bne.n	800185e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	2203      	movs	r2, #3
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4313      	orrs	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001832:	2201      	movs	r2, #1
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	091b      	lsrs	r3, r3, #4
 8001848:	f003 0201 	and.w	r2, r3, #1
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4313      	orrs	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	2b03      	cmp	r3, #3
 8001868:	d017      	beq.n	800189a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	2203      	movs	r2, #3
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	4013      	ands	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d123      	bne.n	80018ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	08da      	lsrs	r2, r3, #3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	3208      	adds	r2, #8
 80018ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	220f      	movs	r2, #15
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43db      	mvns	r3, r3
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4013      	ands	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	691a      	ldr	r2, [r3, #16]
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4313      	orrs	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	08da      	lsrs	r2, r3, #3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3208      	adds	r2, #8
 80018e8:	6939      	ldr	r1, [r7, #16]
 80018ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	2203      	movs	r2, #3
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	4013      	ands	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f003 0203 	and.w	r2, r3, #3
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800192a:	2b00      	cmp	r3, #0
 800192c:	f000 80b2 	beq.w	8001a94 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001930:	4b61      	ldr	r3, [pc, #388]	@ (8001ab8 <HAL_GPIO_Init+0x2fc>)
 8001932:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001934:	4a60      	ldr	r2, [pc, #384]	@ (8001ab8 <HAL_GPIO_Init+0x2fc>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	6613      	str	r3, [r2, #96]	@ 0x60
 800193c:	4b5e      	ldr	r3, [pc, #376]	@ (8001ab8 <HAL_GPIO_Init+0x2fc>)
 800193e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001948:	4a5c      	ldr	r2, [pc, #368]	@ (8001abc <HAL_GPIO_Init+0x300>)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	089b      	lsrs	r3, r3, #2
 800194e:	3302      	adds	r3, #2
 8001950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001954:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	220f      	movs	r2, #15
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4013      	ands	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001972:	d02b      	beq.n	80019cc <HAL_GPIO_Init+0x210>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a52      	ldr	r2, [pc, #328]	@ (8001ac0 <HAL_GPIO_Init+0x304>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d025      	beq.n	80019c8 <HAL_GPIO_Init+0x20c>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a51      	ldr	r2, [pc, #324]	@ (8001ac4 <HAL_GPIO_Init+0x308>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d01f      	beq.n	80019c4 <HAL_GPIO_Init+0x208>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a50      	ldr	r2, [pc, #320]	@ (8001ac8 <HAL_GPIO_Init+0x30c>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d019      	beq.n	80019c0 <HAL_GPIO_Init+0x204>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a4f      	ldr	r2, [pc, #316]	@ (8001acc <HAL_GPIO_Init+0x310>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d013      	beq.n	80019bc <HAL_GPIO_Init+0x200>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a4e      	ldr	r2, [pc, #312]	@ (8001ad0 <HAL_GPIO_Init+0x314>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d00d      	beq.n	80019b8 <HAL_GPIO_Init+0x1fc>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a4d      	ldr	r2, [pc, #308]	@ (8001ad4 <HAL_GPIO_Init+0x318>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d007      	beq.n	80019b4 <HAL_GPIO_Init+0x1f8>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a4c      	ldr	r2, [pc, #304]	@ (8001ad8 <HAL_GPIO_Init+0x31c>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d101      	bne.n	80019b0 <HAL_GPIO_Init+0x1f4>
 80019ac:	2307      	movs	r3, #7
 80019ae:	e00e      	b.n	80019ce <HAL_GPIO_Init+0x212>
 80019b0:	2308      	movs	r3, #8
 80019b2:	e00c      	b.n	80019ce <HAL_GPIO_Init+0x212>
 80019b4:	2306      	movs	r3, #6
 80019b6:	e00a      	b.n	80019ce <HAL_GPIO_Init+0x212>
 80019b8:	2305      	movs	r3, #5
 80019ba:	e008      	b.n	80019ce <HAL_GPIO_Init+0x212>
 80019bc:	2304      	movs	r3, #4
 80019be:	e006      	b.n	80019ce <HAL_GPIO_Init+0x212>
 80019c0:	2303      	movs	r3, #3
 80019c2:	e004      	b.n	80019ce <HAL_GPIO_Init+0x212>
 80019c4:	2302      	movs	r3, #2
 80019c6:	e002      	b.n	80019ce <HAL_GPIO_Init+0x212>
 80019c8:	2301      	movs	r3, #1
 80019ca:	e000      	b.n	80019ce <HAL_GPIO_Init+0x212>
 80019cc:	2300      	movs	r3, #0
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	f002 0203 	and.w	r2, r2, #3
 80019d4:	0092      	lsls	r2, r2, #2
 80019d6:	4093      	lsls	r3, r2
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4313      	orrs	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019de:	4937      	ldr	r1, [pc, #220]	@ (8001abc <HAL_GPIO_Init+0x300>)
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	089b      	lsrs	r3, r3, #2
 80019e4:	3302      	adds	r3, #2
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019ec:	4b3b      	ldr	r3, [pc, #236]	@ (8001adc <HAL_GPIO_Init+0x320>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a10:	4a32      	ldr	r2, [pc, #200]	@ (8001adc <HAL_GPIO_Init+0x320>)
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a16:	4b31      	ldr	r3, [pc, #196]	@ (8001adc <HAL_GPIO_Init+0x320>)
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4013      	ands	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a3a:	4a28      	ldr	r2, [pc, #160]	@ (8001adc <HAL_GPIO_Init+0x320>)
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a40:	4b26      	ldr	r3, [pc, #152]	@ (8001adc <HAL_GPIO_Init+0x320>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a64:	4a1d      	ldr	r2, [pc, #116]	@ (8001adc <HAL_GPIO_Init+0x320>)
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001adc <HAL_GPIO_Init+0x320>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	43db      	mvns	r3, r3
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4013      	ands	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a8e:	4a13      	ldr	r2, [pc, #76]	@ (8001adc <HAL_GPIO_Init+0x320>)
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	3301      	adds	r3, #1
 8001a98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f47f ae91 	bne.w	80017cc <HAL_GPIO_Init+0x10>
  }
}
 8001aaa:	bf00      	nop
 8001aac:	bf00      	nop
 8001aae:	371c      	adds	r7, #28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40010000 	.word	0x40010000
 8001ac0:	48000400 	.word	0x48000400
 8001ac4:	48000800 	.word	0x48000800
 8001ac8:	48000c00 	.word	0x48000c00
 8001acc:	48001000 	.word	0x48001000
 8001ad0:	48001400 	.word	0x48001400
 8001ad4:	48001800 	.word	0x48001800
 8001ad8:	48001c00 	.word	0x48001c00
 8001adc:	40010400 	.word	0x40010400

08001ae0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8001b1c <HAL_PWREx_GetVoltageRange+0x3c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001aec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001af0:	d102      	bne.n	8001af8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001af2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001af6:	e00b      	b.n	8001b10 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001af8:	4b08      	ldr	r3, [pc, #32]	@ (8001b1c <HAL_PWREx_GetVoltageRange+0x3c>)
 8001afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b06:	d102      	bne.n	8001b0e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001b08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b0c:	e000      	b.n	8001b10 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001b0e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40007000 	.word	0x40007000

08001b20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d141      	bne.n	8001bb2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b2e:	4b4b      	ldr	r3, [pc, #300]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b3a:	d131      	bne.n	8001ba0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b3c:	4b47      	ldr	r3, [pc, #284]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b42:	4a46      	ldr	r2, [pc, #280]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b4c:	4b43      	ldr	r3, [pc, #268]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b54:	4a41      	ldr	r2, [pc, #260]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001b5c:	4b40      	ldr	r3, [pc, #256]	@ (8001c60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2232      	movs	r2, #50	@ 0x32
 8001b62:	fb02 f303 	mul.w	r3, r2, r3
 8001b66:	4a3f      	ldr	r2, [pc, #252]	@ (8001c64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b68:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6c:	0c9b      	lsrs	r3, r3, #18
 8001b6e:	3301      	adds	r3, #1
 8001b70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b72:	e002      	b.n	8001b7a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b7a:	4b38      	ldr	r3, [pc, #224]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b86:	d102      	bne.n	8001b8e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f2      	bne.n	8001b74 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b8e:	4b33      	ldr	r3, [pc, #204]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b9a:	d158      	bne.n	8001c4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e057      	b.n	8001c50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ba0:	4b2e      	ldr	r3, [pc, #184]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ba6:	4a2d      	ldr	r2, [pc, #180]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001bac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001bb0:	e04d      	b.n	8001c4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bb8:	d141      	bne.n	8001c3e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bba:	4b28      	ldr	r3, [pc, #160]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001bc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bc6:	d131      	bne.n	8001c2c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bc8:	4b24      	ldr	r3, [pc, #144]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bce:	4a23      	ldr	r2, [pc, #140]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bd4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bd8:	4b20      	ldr	r3, [pc, #128]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001be0:	4a1e      	ldr	r2, [pc, #120]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001be6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001be8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2232      	movs	r2, #50	@ 0x32
 8001bee:	fb02 f303 	mul.w	r3, r2, r3
 8001bf2:	4a1c      	ldr	r2, [pc, #112]	@ (8001c64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf8:	0c9b      	lsrs	r3, r3, #18
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bfe:	e002      	b.n	8001c06 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c06:	4b15      	ldr	r3, [pc, #84]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c12:	d102      	bne.n	8001c1a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f2      	bne.n	8001c00 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c1a:	4b10      	ldr	r3, [pc, #64]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c26:	d112      	bne.n	8001c4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e011      	b.n	8001c50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c32:	4a0a      	ldr	r2, [pc, #40]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001c3c:	e007      	b.n	8001c4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c3e:	4b07      	ldr	r3, [pc, #28]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c46:	4a05      	ldr	r2, [pc, #20]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c48:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c4c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	40007000 	.word	0x40007000
 8001c60:	20040004 	.word	0x20040004
 8001c64:	431bde83 	.word	0x431bde83

08001c68 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001c6c:	4b05      	ldr	r3, [pc, #20]	@ (8001c84 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	4a04      	ldr	r2, [pc, #16]	@ (8001c84 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001c72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c76:	6053      	str	r3, [r2, #4]
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40007000 	.word	0x40007000

08001c88 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b088      	sub	sp, #32
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d102      	bne.n	8001c9c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	f000 bc08 	b.w	80024ac <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c9c:	4b96      	ldr	r3, [pc, #600]	@ (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 030c 	and.w	r3, r3, #12
 8001ca4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ca6:	4b94      	ldr	r3, [pc, #592]	@ (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0310 	and.w	r3, r3, #16
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f000 80e4 	beq.w	8001e86 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d007      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x4c>
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	2b0c      	cmp	r3, #12
 8001cc8:	f040 808b 	bne.w	8001de2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	f040 8087 	bne.w	8001de2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cd4:	4b88      	ldr	r3, [pc, #544]	@ (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d005      	beq.n	8001cec <HAL_RCC_OscConfig+0x64>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e3df      	b.n	80024ac <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a1a      	ldr	r2, [r3, #32]
 8001cf0:	4b81      	ldr	r3, [pc, #516]	@ (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0308 	and.w	r3, r3, #8
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d004      	beq.n	8001d06 <HAL_RCC_OscConfig+0x7e>
 8001cfc:	4b7e      	ldr	r3, [pc, #504]	@ (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d04:	e005      	b.n	8001d12 <HAL_RCC_OscConfig+0x8a>
 8001d06:	4b7c      	ldr	r3, [pc, #496]	@ (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001d08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d0c:	091b      	lsrs	r3, r3, #4
 8001d0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d223      	bcs.n	8001d5e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 fdcc 	bl	80028b8 <RCC_SetFlashLatencyFromMSIRange>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e3c0      	b.n	80024ac <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d2a:	4b73      	ldr	r3, [pc, #460]	@ (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a72      	ldr	r2, [pc, #456]	@ (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001d30:	f043 0308 	orr.w	r3, r3, #8
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	4b70      	ldr	r3, [pc, #448]	@ (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	496d      	ldr	r1, [pc, #436]	@ (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d48:	4b6b      	ldr	r3, [pc, #428]	@ (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	021b      	lsls	r3, r3, #8
 8001d56:	4968      	ldr	r1, [pc, #416]	@ (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	604b      	str	r3, [r1, #4]
 8001d5c:	e025      	b.n	8001daa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d5e:	4b66      	ldr	r3, [pc, #408]	@ (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a65      	ldr	r2, [pc, #404]	@ (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001d64:	f043 0308 	orr.w	r3, r3, #8
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	4b63      	ldr	r3, [pc, #396]	@ (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	4960      	ldr	r1, [pc, #384]	@ (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d7c:	4b5e      	ldr	r3, [pc, #376]	@ (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	021b      	lsls	r3, r3, #8
 8001d8a:	495b      	ldr	r1, [pc, #364]	@ (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d109      	bne.n	8001daa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f000 fd8c 	bl	80028b8 <RCC_SetFlashLatencyFromMSIRange>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e380      	b.n	80024ac <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001daa:	f000 fcc1 	bl	8002730 <HAL_RCC_GetSysClockFreq>
 8001dae:	4602      	mov	r2, r0
 8001db0:	4b51      	ldr	r3, [pc, #324]	@ (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	091b      	lsrs	r3, r3, #4
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	4950      	ldr	r1, [pc, #320]	@ (8001efc <HAL_RCC_OscConfig+0x274>)
 8001dbc:	5ccb      	ldrb	r3, [r1, r3]
 8001dbe:	f003 031f 	and.w	r3, r3, #31
 8001dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc6:	4a4e      	ldr	r2, [pc, #312]	@ (8001f00 <HAL_RCC_OscConfig+0x278>)
 8001dc8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001dca:	4b4e      	ldr	r3, [pc, #312]	@ (8001f04 <HAL_RCC_OscConfig+0x27c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff f858 	bl	8000e84 <HAL_InitTick>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d052      	beq.n	8001e84 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001dde:	7bfb      	ldrb	r3, [r7, #15]
 8001de0:	e364      	b.n	80024ac <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d032      	beq.n	8001e50 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001dea:	4b43      	ldr	r3, [pc, #268]	@ (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a42      	ldr	r2, [pc, #264]	@ (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001df6:	f7ff f895 	bl	8000f24 <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dfe:	f7ff f891 	bl	8000f24 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e34d      	b.n	80024ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e10:	4b39      	ldr	r3, [pc, #228]	@ (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d0f0      	beq.n	8001dfe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e1c:	4b36      	ldr	r3, [pc, #216]	@ (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a35      	ldr	r2, [pc, #212]	@ (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001e22:	f043 0308 	orr.w	r3, r3, #8
 8001e26:	6013      	str	r3, [r2, #0]
 8001e28:	4b33      	ldr	r3, [pc, #204]	@ (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	4930      	ldr	r1, [pc, #192]	@ (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e3a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	021b      	lsls	r3, r3, #8
 8001e48:	492b      	ldr	r1, [pc, #172]	@ (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	604b      	str	r3, [r1, #4]
 8001e4e:	e01a      	b.n	8001e86 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e50:	4b29      	ldr	r3, [pc, #164]	@ (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a28      	ldr	r2, [pc, #160]	@ (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001e56:	f023 0301 	bic.w	r3, r3, #1
 8001e5a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e5c:	f7ff f862 	bl	8000f24 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e64:	f7ff f85e 	bl	8000f24 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e31a      	b.n	80024ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e76:	4b20      	ldr	r3, [pc, #128]	@ (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f0      	bne.n	8001e64 <HAL_RCC_OscConfig+0x1dc>
 8001e82:	e000      	b.n	8001e86 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e84:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d073      	beq.n	8001f7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	2b08      	cmp	r3, #8
 8001e96:	d005      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x21c>
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	2b0c      	cmp	r3, #12
 8001e9c:	d10e      	bne.n	8001ebc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	2b03      	cmp	r3, #3
 8001ea2:	d10b      	bne.n	8001ebc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea4:	4b14      	ldr	r3, [pc, #80]	@ (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d063      	beq.n	8001f78 <HAL_RCC_OscConfig+0x2f0>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d15f      	bne.n	8001f78 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e2f7      	b.n	80024ac <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ec4:	d106      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x24c>
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a0b      	ldr	r2, [pc, #44]	@ (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001ecc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	e025      	b.n	8001f20 <HAL_RCC_OscConfig+0x298>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001edc:	d114      	bne.n	8001f08 <HAL_RCC_OscConfig+0x280>
 8001ede:	4b06      	ldr	r3, [pc, #24]	@ (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a05      	ldr	r2, [pc, #20]	@ (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001ee4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	4b03      	ldr	r3, [pc, #12]	@ (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a02      	ldr	r2, [pc, #8]	@ (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001ef0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ef4:	6013      	str	r3, [r2, #0]
 8001ef6:	e013      	b.n	8001f20 <HAL_RCC_OscConfig+0x298>
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	08004eb8 	.word	0x08004eb8
 8001f00:	20040004 	.word	0x20040004
 8001f04:	20040008 	.word	0x20040008
 8001f08:	4ba0      	ldr	r3, [pc, #640]	@ (800218c <HAL_RCC_OscConfig+0x504>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a9f      	ldr	r2, [pc, #636]	@ (800218c <HAL_RCC_OscConfig+0x504>)
 8001f0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f12:	6013      	str	r3, [r2, #0]
 8001f14:	4b9d      	ldr	r3, [pc, #628]	@ (800218c <HAL_RCC_OscConfig+0x504>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a9c      	ldr	r2, [pc, #624]	@ (800218c <HAL_RCC_OscConfig+0x504>)
 8001f1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d013      	beq.n	8001f50 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f28:	f7fe fffc 	bl	8000f24 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f30:	f7fe fff8 	bl	8000f24 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b64      	cmp	r3, #100	@ 0x64
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e2b4      	b.n	80024ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f42:	4b92      	ldr	r3, [pc, #584]	@ (800218c <HAL_RCC_OscConfig+0x504>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0f0      	beq.n	8001f30 <HAL_RCC_OscConfig+0x2a8>
 8001f4e:	e014      	b.n	8001f7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f50:	f7fe ffe8 	bl	8000f24 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f58:	f7fe ffe4 	bl	8000f24 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b64      	cmp	r3, #100	@ 0x64
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e2a0      	b.n	80024ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f6a:	4b88      	ldr	r3, [pc, #544]	@ (800218c <HAL_RCC_OscConfig+0x504>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f0      	bne.n	8001f58 <HAL_RCC_OscConfig+0x2d0>
 8001f76:	e000      	b.n	8001f7a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d060      	beq.n	8002048 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	2b04      	cmp	r3, #4
 8001f8a:	d005      	beq.n	8001f98 <HAL_RCC_OscConfig+0x310>
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	2b0c      	cmp	r3, #12
 8001f90:	d119      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d116      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f98:	4b7c      	ldr	r3, [pc, #496]	@ (800218c <HAL_RCC_OscConfig+0x504>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d005      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x328>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e27d      	b.n	80024ac <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb0:	4b76      	ldr	r3, [pc, #472]	@ (800218c <HAL_RCC_OscConfig+0x504>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	061b      	lsls	r3, r3, #24
 8001fbe:	4973      	ldr	r1, [pc, #460]	@ (800218c <HAL_RCC_OscConfig+0x504>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fc4:	e040      	b.n	8002048 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d023      	beq.n	8002016 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fce:	4b6f      	ldr	r3, [pc, #444]	@ (800218c <HAL_RCC_OscConfig+0x504>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a6e      	ldr	r2, [pc, #440]	@ (800218c <HAL_RCC_OscConfig+0x504>)
 8001fd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fda:	f7fe ffa3 	bl	8000f24 <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe2:	f7fe ff9f 	bl	8000f24 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e25b      	b.n	80024ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ff4:	4b65      	ldr	r3, [pc, #404]	@ (800218c <HAL_RCC_OscConfig+0x504>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0f0      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002000:	4b62      	ldr	r3, [pc, #392]	@ (800218c <HAL_RCC_OscConfig+0x504>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	061b      	lsls	r3, r3, #24
 800200e:	495f      	ldr	r1, [pc, #380]	@ (800218c <HAL_RCC_OscConfig+0x504>)
 8002010:	4313      	orrs	r3, r2
 8002012:	604b      	str	r3, [r1, #4]
 8002014:	e018      	b.n	8002048 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002016:	4b5d      	ldr	r3, [pc, #372]	@ (800218c <HAL_RCC_OscConfig+0x504>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a5c      	ldr	r2, [pc, #368]	@ (800218c <HAL_RCC_OscConfig+0x504>)
 800201c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002020:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002022:	f7fe ff7f 	bl	8000f24 <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002028:	e008      	b.n	800203c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800202a:	f7fe ff7b 	bl	8000f24 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e237      	b.n	80024ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800203c:	4b53      	ldr	r3, [pc, #332]	@ (800218c <HAL_RCC_OscConfig+0x504>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1f0      	bne.n	800202a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0308 	and.w	r3, r3, #8
 8002050:	2b00      	cmp	r3, #0
 8002052:	d03c      	beq.n	80020ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d01c      	beq.n	8002096 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800205c:	4b4b      	ldr	r3, [pc, #300]	@ (800218c <HAL_RCC_OscConfig+0x504>)
 800205e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002062:	4a4a      	ldr	r2, [pc, #296]	@ (800218c <HAL_RCC_OscConfig+0x504>)
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206c:	f7fe ff5a 	bl	8000f24 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002074:	f7fe ff56 	bl	8000f24 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e212      	b.n	80024ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002086:	4b41      	ldr	r3, [pc, #260]	@ (800218c <HAL_RCC_OscConfig+0x504>)
 8002088:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0ef      	beq.n	8002074 <HAL_RCC_OscConfig+0x3ec>
 8002094:	e01b      	b.n	80020ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002096:	4b3d      	ldr	r3, [pc, #244]	@ (800218c <HAL_RCC_OscConfig+0x504>)
 8002098:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800209c:	4a3b      	ldr	r2, [pc, #236]	@ (800218c <HAL_RCC_OscConfig+0x504>)
 800209e:	f023 0301 	bic.w	r3, r3, #1
 80020a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a6:	f7fe ff3d 	bl	8000f24 <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ae:	f7fe ff39 	bl	8000f24 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e1f5      	b.n	80024ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020c0:	4b32      	ldr	r3, [pc, #200]	@ (800218c <HAL_RCC_OscConfig+0x504>)
 80020c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1ef      	bne.n	80020ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f000 80a6 	beq.w	8002228 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020dc:	2300      	movs	r3, #0
 80020de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80020e0:	4b2a      	ldr	r3, [pc, #168]	@ (800218c <HAL_RCC_OscConfig+0x504>)
 80020e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10d      	bne.n	8002108 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ec:	4b27      	ldr	r3, [pc, #156]	@ (800218c <HAL_RCC_OscConfig+0x504>)
 80020ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f0:	4a26      	ldr	r2, [pc, #152]	@ (800218c <HAL_RCC_OscConfig+0x504>)
 80020f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80020f8:	4b24      	ldr	r3, [pc, #144]	@ (800218c <HAL_RCC_OscConfig+0x504>)
 80020fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002104:	2301      	movs	r3, #1
 8002106:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002108:	4b21      	ldr	r3, [pc, #132]	@ (8002190 <HAL_RCC_OscConfig+0x508>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002110:	2b00      	cmp	r3, #0
 8002112:	d118      	bne.n	8002146 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002114:	4b1e      	ldr	r3, [pc, #120]	@ (8002190 <HAL_RCC_OscConfig+0x508>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a1d      	ldr	r2, [pc, #116]	@ (8002190 <HAL_RCC_OscConfig+0x508>)
 800211a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800211e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002120:	f7fe ff00 	bl	8000f24 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002128:	f7fe fefc 	bl	8000f24 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e1b8      	b.n	80024ac <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800213a:	4b15      	ldr	r3, [pc, #84]	@ (8002190 <HAL_RCC_OscConfig+0x508>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0f0      	beq.n	8002128 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d108      	bne.n	8002160 <HAL_RCC_OscConfig+0x4d8>
 800214e:	4b0f      	ldr	r3, [pc, #60]	@ (800218c <HAL_RCC_OscConfig+0x504>)
 8002150:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002154:	4a0d      	ldr	r2, [pc, #52]	@ (800218c <HAL_RCC_OscConfig+0x504>)
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800215e:	e029      	b.n	80021b4 <HAL_RCC_OscConfig+0x52c>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2b05      	cmp	r3, #5
 8002166:	d115      	bne.n	8002194 <HAL_RCC_OscConfig+0x50c>
 8002168:	4b08      	ldr	r3, [pc, #32]	@ (800218c <HAL_RCC_OscConfig+0x504>)
 800216a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800216e:	4a07      	ldr	r2, [pc, #28]	@ (800218c <HAL_RCC_OscConfig+0x504>)
 8002170:	f043 0304 	orr.w	r3, r3, #4
 8002174:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002178:	4b04      	ldr	r3, [pc, #16]	@ (800218c <HAL_RCC_OscConfig+0x504>)
 800217a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800217e:	4a03      	ldr	r2, [pc, #12]	@ (800218c <HAL_RCC_OscConfig+0x504>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002188:	e014      	b.n	80021b4 <HAL_RCC_OscConfig+0x52c>
 800218a:	bf00      	nop
 800218c:	40021000 	.word	0x40021000
 8002190:	40007000 	.word	0x40007000
 8002194:	4b9d      	ldr	r3, [pc, #628]	@ (800240c <HAL_RCC_OscConfig+0x784>)
 8002196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800219a:	4a9c      	ldr	r2, [pc, #624]	@ (800240c <HAL_RCC_OscConfig+0x784>)
 800219c:	f023 0301 	bic.w	r3, r3, #1
 80021a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021a4:	4b99      	ldr	r3, [pc, #612]	@ (800240c <HAL_RCC_OscConfig+0x784>)
 80021a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021aa:	4a98      	ldr	r2, [pc, #608]	@ (800240c <HAL_RCC_OscConfig+0x784>)
 80021ac:	f023 0304 	bic.w	r3, r3, #4
 80021b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d016      	beq.n	80021ea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021bc:	f7fe feb2 	bl	8000f24 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021c2:	e00a      	b.n	80021da <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c4:	f7fe feae 	bl	8000f24 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e168      	b.n	80024ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021da:	4b8c      	ldr	r3, [pc, #560]	@ (800240c <HAL_RCC_OscConfig+0x784>)
 80021dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0ed      	beq.n	80021c4 <HAL_RCC_OscConfig+0x53c>
 80021e8:	e015      	b.n	8002216 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ea:	f7fe fe9b 	bl	8000f24 <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021f0:	e00a      	b.n	8002208 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f2:	f7fe fe97 	bl	8000f24 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002200:	4293      	cmp	r3, r2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e151      	b.n	80024ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002208:	4b80      	ldr	r3, [pc, #512]	@ (800240c <HAL_RCC_OscConfig+0x784>)
 800220a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1ed      	bne.n	80021f2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002216:	7ffb      	ldrb	r3, [r7, #31]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d105      	bne.n	8002228 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800221c:	4b7b      	ldr	r3, [pc, #492]	@ (800240c <HAL_RCC_OscConfig+0x784>)
 800221e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002220:	4a7a      	ldr	r2, [pc, #488]	@ (800240c <HAL_RCC_OscConfig+0x784>)
 8002222:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002226:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0320 	and.w	r3, r3, #32
 8002230:	2b00      	cmp	r3, #0
 8002232:	d03c      	beq.n	80022ae <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002238:	2b00      	cmp	r3, #0
 800223a:	d01c      	beq.n	8002276 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800223c:	4b73      	ldr	r3, [pc, #460]	@ (800240c <HAL_RCC_OscConfig+0x784>)
 800223e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002242:	4a72      	ldr	r2, [pc, #456]	@ (800240c <HAL_RCC_OscConfig+0x784>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800224c:	f7fe fe6a 	bl	8000f24 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002254:	f7fe fe66 	bl	8000f24 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e122      	b.n	80024ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002266:	4b69      	ldr	r3, [pc, #420]	@ (800240c <HAL_RCC_OscConfig+0x784>)
 8002268:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0ef      	beq.n	8002254 <HAL_RCC_OscConfig+0x5cc>
 8002274:	e01b      	b.n	80022ae <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002276:	4b65      	ldr	r3, [pc, #404]	@ (800240c <HAL_RCC_OscConfig+0x784>)
 8002278:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800227c:	4a63      	ldr	r2, [pc, #396]	@ (800240c <HAL_RCC_OscConfig+0x784>)
 800227e:	f023 0301 	bic.w	r3, r3, #1
 8002282:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002286:	f7fe fe4d 	bl	8000f24 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800228e:	f7fe fe49 	bl	8000f24 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e105      	b.n	80024ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022a0:	4b5a      	ldr	r3, [pc, #360]	@ (800240c <HAL_RCC_OscConfig+0x784>)
 80022a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1ef      	bne.n	800228e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 80f9 	beq.w	80024aa <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022bc:	2b02      	cmp	r3, #2
 80022be:	f040 80cf 	bne.w	8002460 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80022c2:	4b52      	ldr	r3, [pc, #328]	@ (800240c <HAL_RCC_OscConfig+0x784>)
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	f003 0203 	and.w	r2, r3, #3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d12c      	bne.n	8002330 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e0:	3b01      	subs	r3, #1
 80022e2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d123      	bne.n	8002330 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022f2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d11b      	bne.n	8002330 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002302:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002304:	429a      	cmp	r2, r3
 8002306:	d113      	bne.n	8002330 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002312:	085b      	lsrs	r3, r3, #1
 8002314:	3b01      	subs	r3, #1
 8002316:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002318:	429a      	cmp	r2, r3
 800231a:	d109      	bne.n	8002330 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002326:	085b      	lsrs	r3, r3, #1
 8002328:	3b01      	subs	r3, #1
 800232a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800232c:	429a      	cmp	r2, r3
 800232e:	d071      	beq.n	8002414 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	2b0c      	cmp	r3, #12
 8002334:	d068      	beq.n	8002408 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002336:	4b35      	ldr	r3, [pc, #212]	@ (800240c <HAL_RCC_OscConfig+0x784>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d105      	bne.n	800234e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002342:	4b32      	ldr	r3, [pc, #200]	@ (800240c <HAL_RCC_OscConfig+0x784>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e0ac      	b.n	80024ac <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002352:	4b2e      	ldr	r3, [pc, #184]	@ (800240c <HAL_RCC_OscConfig+0x784>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a2d      	ldr	r2, [pc, #180]	@ (800240c <HAL_RCC_OscConfig+0x784>)
 8002358:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800235c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800235e:	f7fe fde1 	bl	8000f24 <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002364:	e008      	b.n	8002378 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002366:	f7fe fddd 	bl	8000f24 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e099      	b.n	80024ac <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002378:	4b24      	ldr	r3, [pc, #144]	@ (800240c <HAL_RCC_OscConfig+0x784>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1f0      	bne.n	8002366 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002384:	4b21      	ldr	r3, [pc, #132]	@ (800240c <HAL_RCC_OscConfig+0x784>)
 8002386:	68da      	ldr	r2, [r3, #12]
 8002388:	4b21      	ldr	r3, [pc, #132]	@ (8002410 <HAL_RCC_OscConfig+0x788>)
 800238a:	4013      	ands	r3, r2
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002394:	3a01      	subs	r2, #1
 8002396:	0112      	lsls	r2, r2, #4
 8002398:	4311      	orrs	r1, r2
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800239e:	0212      	lsls	r2, r2, #8
 80023a0:	4311      	orrs	r1, r2
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80023a6:	0852      	lsrs	r2, r2, #1
 80023a8:	3a01      	subs	r2, #1
 80023aa:	0552      	lsls	r2, r2, #21
 80023ac:	4311      	orrs	r1, r2
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80023b2:	0852      	lsrs	r2, r2, #1
 80023b4:	3a01      	subs	r2, #1
 80023b6:	0652      	lsls	r2, r2, #25
 80023b8:	4311      	orrs	r1, r2
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80023be:	06d2      	lsls	r2, r2, #27
 80023c0:	430a      	orrs	r2, r1
 80023c2:	4912      	ldr	r1, [pc, #72]	@ (800240c <HAL_RCC_OscConfig+0x784>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80023c8:	4b10      	ldr	r3, [pc, #64]	@ (800240c <HAL_RCC_OscConfig+0x784>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a0f      	ldr	r2, [pc, #60]	@ (800240c <HAL_RCC_OscConfig+0x784>)
 80023ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023d4:	4b0d      	ldr	r3, [pc, #52]	@ (800240c <HAL_RCC_OscConfig+0x784>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	4a0c      	ldr	r2, [pc, #48]	@ (800240c <HAL_RCC_OscConfig+0x784>)
 80023da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023e0:	f7fe fda0 	bl	8000f24 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e8:	f7fe fd9c 	bl	8000f24 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e058      	b.n	80024ac <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023fa:	4b04      	ldr	r3, [pc, #16]	@ (800240c <HAL_RCC_OscConfig+0x784>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0f0      	beq.n	80023e8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002406:	e050      	b.n	80024aa <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e04f      	b.n	80024ac <HAL_RCC_OscConfig+0x824>
 800240c:	40021000 	.word	0x40021000
 8002410:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002414:	4b27      	ldr	r3, [pc, #156]	@ (80024b4 <HAL_RCC_OscConfig+0x82c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d144      	bne.n	80024aa <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002420:	4b24      	ldr	r3, [pc, #144]	@ (80024b4 <HAL_RCC_OscConfig+0x82c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a23      	ldr	r2, [pc, #140]	@ (80024b4 <HAL_RCC_OscConfig+0x82c>)
 8002426:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800242a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800242c:	4b21      	ldr	r3, [pc, #132]	@ (80024b4 <HAL_RCC_OscConfig+0x82c>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	4a20      	ldr	r2, [pc, #128]	@ (80024b4 <HAL_RCC_OscConfig+0x82c>)
 8002432:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002436:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002438:	f7fe fd74 	bl	8000f24 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002440:	f7fe fd70 	bl	8000f24 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e02c      	b.n	80024ac <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002452:	4b18      	ldr	r3, [pc, #96]	@ (80024b4 <HAL_RCC_OscConfig+0x82c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0f0      	beq.n	8002440 <HAL_RCC_OscConfig+0x7b8>
 800245e:	e024      	b.n	80024aa <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	2b0c      	cmp	r3, #12
 8002464:	d01f      	beq.n	80024a6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002466:	4b13      	ldr	r3, [pc, #76]	@ (80024b4 <HAL_RCC_OscConfig+0x82c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a12      	ldr	r2, [pc, #72]	@ (80024b4 <HAL_RCC_OscConfig+0x82c>)
 800246c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002470:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002472:	f7fe fd57 	bl	8000f24 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800247a:	f7fe fd53 	bl	8000f24 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e00f      	b.n	80024ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800248c:	4b09      	ldr	r3, [pc, #36]	@ (80024b4 <HAL_RCC_OscConfig+0x82c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1f0      	bne.n	800247a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002498:	4b06      	ldr	r3, [pc, #24]	@ (80024b4 <HAL_RCC_OscConfig+0x82c>)
 800249a:	68da      	ldr	r2, [r3, #12]
 800249c:	4905      	ldr	r1, [pc, #20]	@ (80024b4 <HAL_RCC_OscConfig+0x82c>)
 800249e:	4b06      	ldr	r3, [pc, #24]	@ (80024b8 <HAL_RCC_OscConfig+0x830>)
 80024a0:	4013      	ands	r3, r2
 80024a2:	60cb      	str	r3, [r1, #12]
 80024a4:	e001      	b.n	80024aa <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e000      	b.n	80024ac <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3720      	adds	r7, #32
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40021000 	.word	0x40021000
 80024b8:	feeefffc 	.word	0xfeeefffc

080024bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e11d      	b.n	8002710 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024d4:	4b90      	ldr	r3, [pc, #576]	@ (8002718 <HAL_RCC_ClockConfig+0x25c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 030f 	and.w	r3, r3, #15
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d910      	bls.n	8002504 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e2:	4b8d      	ldr	r3, [pc, #564]	@ (8002718 <HAL_RCC_ClockConfig+0x25c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f023 020f 	bic.w	r2, r3, #15
 80024ea:	498b      	ldr	r1, [pc, #556]	@ (8002718 <HAL_RCC_ClockConfig+0x25c>)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f2:	4b89      	ldr	r3, [pc, #548]	@ (8002718 <HAL_RCC_ClockConfig+0x25c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d001      	beq.n	8002504 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e105      	b.n	8002710 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d010      	beq.n	8002532 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	4b81      	ldr	r3, [pc, #516]	@ (800271c <HAL_RCC_ClockConfig+0x260>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800251c:	429a      	cmp	r2, r3
 800251e:	d908      	bls.n	8002532 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002520:	4b7e      	ldr	r3, [pc, #504]	@ (800271c <HAL_RCC_ClockConfig+0x260>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	497b      	ldr	r1, [pc, #492]	@ (800271c <HAL_RCC_ClockConfig+0x260>)
 800252e:	4313      	orrs	r3, r2
 8002530:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d079      	beq.n	8002632 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b03      	cmp	r3, #3
 8002544:	d11e      	bne.n	8002584 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002546:	4b75      	ldr	r3, [pc, #468]	@ (800271c <HAL_RCC_ClockConfig+0x260>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e0dc      	b.n	8002710 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002556:	f000 fa09 	bl	800296c <RCC_GetSysClockFreqFromPLLSource>
 800255a:	4603      	mov	r3, r0
 800255c:	4a70      	ldr	r2, [pc, #448]	@ (8002720 <HAL_RCC_ClockConfig+0x264>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d946      	bls.n	80025f0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002562:	4b6e      	ldr	r3, [pc, #440]	@ (800271c <HAL_RCC_ClockConfig+0x260>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d140      	bne.n	80025f0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800256e:	4b6b      	ldr	r3, [pc, #428]	@ (800271c <HAL_RCC_ClockConfig+0x260>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002576:	4a69      	ldr	r2, [pc, #420]	@ (800271c <HAL_RCC_ClockConfig+0x260>)
 8002578:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800257c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800257e:	2380      	movs	r3, #128	@ 0x80
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	e035      	b.n	80025f0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b02      	cmp	r3, #2
 800258a:	d107      	bne.n	800259c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800258c:	4b63      	ldr	r3, [pc, #396]	@ (800271c <HAL_RCC_ClockConfig+0x260>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d115      	bne.n	80025c4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e0b9      	b.n	8002710 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d107      	bne.n	80025b4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025a4:	4b5d      	ldr	r3, [pc, #372]	@ (800271c <HAL_RCC_ClockConfig+0x260>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d109      	bne.n	80025c4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e0ad      	b.n	8002710 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025b4:	4b59      	ldr	r3, [pc, #356]	@ (800271c <HAL_RCC_ClockConfig+0x260>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e0a5      	b.n	8002710 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80025c4:	f000 f8b4 	bl	8002730 <HAL_RCC_GetSysClockFreq>
 80025c8:	4603      	mov	r3, r0
 80025ca:	4a55      	ldr	r2, [pc, #340]	@ (8002720 <HAL_RCC_ClockConfig+0x264>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d90f      	bls.n	80025f0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80025d0:	4b52      	ldr	r3, [pc, #328]	@ (800271c <HAL_RCC_ClockConfig+0x260>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d109      	bne.n	80025f0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80025dc:	4b4f      	ldr	r3, [pc, #316]	@ (800271c <HAL_RCC_ClockConfig+0x260>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80025e4:	4a4d      	ldr	r2, [pc, #308]	@ (800271c <HAL_RCC_ClockConfig+0x260>)
 80025e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025ea:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80025ec:	2380      	movs	r3, #128	@ 0x80
 80025ee:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025f0:	4b4a      	ldr	r3, [pc, #296]	@ (800271c <HAL_RCC_ClockConfig+0x260>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f023 0203 	bic.w	r2, r3, #3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	4947      	ldr	r1, [pc, #284]	@ (800271c <HAL_RCC_ClockConfig+0x260>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002602:	f7fe fc8f 	bl	8000f24 <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002608:	e00a      	b.n	8002620 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800260a:	f7fe fc8b 	bl	8000f24 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002618:	4293      	cmp	r3, r2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e077      	b.n	8002710 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002620:	4b3e      	ldr	r3, [pc, #248]	@ (800271c <HAL_RCC_ClockConfig+0x260>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 020c 	and.w	r2, r3, #12
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	429a      	cmp	r2, r3
 8002630:	d1eb      	bne.n	800260a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	2b80      	cmp	r3, #128	@ 0x80
 8002636:	d105      	bne.n	8002644 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002638:	4b38      	ldr	r3, [pc, #224]	@ (800271c <HAL_RCC_ClockConfig+0x260>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	4a37      	ldr	r2, [pc, #220]	@ (800271c <HAL_RCC_ClockConfig+0x260>)
 800263e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002642:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d010      	beq.n	8002672 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	4b31      	ldr	r3, [pc, #196]	@ (800271c <HAL_RCC_ClockConfig+0x260>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800265c:	429a      	cmp	r2, r3
 800265e:	d208      	bcs.n	8002672 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002660:	4b2e      	ldr	r3, [pc, #184]	@ (800271c <HAL_RCC_ClockConfig+0x260>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	492b      	ldr	r1, [pc, #172]	@ (800271c <HAL_RCC_ClockConfig+0x260>)
 800266e:	4313      	orrs	r3, r2
 8002670:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002672:	4b29      	ldr	r3, [pc, #164]	@ (8002718 <HAL_RCC_ClockConfig+0x25c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	429a      	cmp	r2, r3
 800267e:	d210      	bcs.n	80026a2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002680:	4b25      	ldr	r3, [pc, #148]	@ (8002718 <HAL_RCC_ClockConfig+0x25c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f023 020f 	bic.w	r2, r3, #15
 8002688:	4923      	ldr	r1, [pc, #140]	@ (8002718 <HAL_RCC_ClockConfig+0x25c>)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	4313      	orrs	r3, r2
 800268e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002690:	4b21      	ldr	r3, [pc, #132]	@ (8002718 <HAL_RCC_ClockConfig+0x25c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 030f 	and.w	r3, r3, #15
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d001      	beq.n	80026a2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e036      	b.n	8002710 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0304 	and.w	r3, r3, #4
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d008      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026ae:	4b1b      	ldr	r3, [pc, #108]	@ (800271c <HAL_RCC_ClockConfig+0x260>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	4918      	ldr	r1, [pc, #96]	@ (800271c <HAL_RCC_ClockConfig+0x260>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0308 	and.w	r3, r3, #8
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d009      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026cc:	4b13      	ldr	r3, [pc, #76]	@ (800271c <HAL_RCC_ClockConfig+0x260>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	4910      	ldr	r1, [pc, #64]	@ (800271c <HAL_RCC_ClockConfig+0x260>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026e0:	f000 f826 	bl	8002730 <HAL_RCC_GetSysClockFreq>
 80026e4:	4602      	mov	r2, r0
 80026e6:	4b0d      	ldr	r3, [pc, #52]	@ (800271c <HAL_RCC_ClockConfig+0x260>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	091b      	lsrs	r3, r3, #4
 80026ec:	f003 030f 	and.w	r3, r3, #15
 80026f0:	490c      	ldr	r1, [pc, #48]	@ (8002724 <HAL_RCC_ClockConfig+0x268>)
 80026f2:	5ccb      	ldrb	r3, [r1, r3]
 80026f4:	f003 031f 	and.w	r3, r3, #31
 80026f8:	fa22 f303 	lsr.w	r3, r2, r3
 80026fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002728 <HAL_RCC_ClockConfig+0x26c>)
 80026fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002700:	4b0a      	ldr	r3, [pc, #40]	@ (800272c <HAL_RCC_ClockConfig+0x270>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f7fe fbbd 	bl	8000e84 <HAL_InitTick>
 800270a:	4603      	mov	r3, r0
 800270c:	73fb      	strb	r3, [r7, #15]

  return status;
 800270e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002710:	4618      	mov	r0, r3
 8002712:	3718      	adds	r7, #24
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40022000 	.word	0x40022000
 800271c:	40021000 	.word	0x40021000
 8002720:	04c4b400 	.word	0x04c4b400
 8002724:	08004eb8 	.word	0x08004eb8
 8002728:	20040004 	.word	0x20040004
 800272c:	20040008 	.word	0x20040008

08002730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002730:	b480      	push	{r7}
 8002732:	b089      	sub	sp, #36	@ 0x24
 8002734:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
 800273a:	2300      	movs	r3, #0
 800273c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800273e:	4b3e      	ldr	r3, [pc, #248]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x108>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 030c 	and.w	r3, r3, #12
 8002746:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002748:	4b3b      	ldr	r3, [pc, #236]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x108>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f003 0303 	and.w	r3, r3, #3
 8002750:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d005      	beq.n	8002764 <HAL_RCC_GetSysClockFreq+0x34>
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	2b0c      	cmp	r3, #12
 800275c:	d121      	bne.n	80027a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d11e      	bne.n	80027a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002764:	4b34      	ldr	r3, [pc, #208]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x108>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0308 	and.w	r3, r3, #8
 800276c:	2b00      	cmp	r3, #0
 800276e:	d107      	bne.n	8002780 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002770:	4b31      	ldr	r3, [pc, #196]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x108>)
 8002772:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002776:	0a1b      	lsrs	r3, r3, #8
 8002778:	f003 030f 	and.w	r3, r3, #15
 800277c:	61fb      	str	r3, [r7, #28]
 800277e:	e005      	b.n	800278c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002780:	4b2d      	ldr	r3, [pc, #180]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x108>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	091b      	lsrs	r3, r3, #4
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800278c:	4a2b      	ldr	r2, [pc, #172]	@ (800283c <HAL_RCC_GetSysClockFreq+0x10c>)
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002794:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10d      	bne.n	80027b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027a0:	e00a      	b.n	80027b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	2b04      	cmp	r3, #4
 80027a6:	d102      	bne.n	80027ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027a8:	4b25      	ldr	r3, [pc, #148]	@ (8002840 <HAL_RCC_GetSysClockFreq+0x110>)
 80027aa:	61bb      	str	r3, [r7, #24]
 80027ac:	e004      	b.n	80027b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	2b08      	cmp	r3, #8
 80027b2:	d101      	bne.n	80027b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027b4:	4b23      	ldr	r3, [pc, #140]	@ (8002844 <HAL_RCC_GetSysClockFreq+0x114>)
 80027b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	2b0c      	cmp	r3, #12
 80027bc:	d134      	bne.n	8002828 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027be:	4b1e      	ldr	r3, [pc, #120]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x108>)
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	f003 0303 	and.w	r3, r3, #3
 80027c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d003      	beq.n	80027d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	2b03      	cmp	r3, #3
 80027d2:	d003      	beq.n	80027dc <HAL_RCC_GetSysClockFreq+0xac>
 80027d4:	e005      	b.n	80027e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80027d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002840 <HAL_RCC_GetSysClockFreq+0x110>)
 80027d8:	617b      	str	r3, [r7, #20]
      break;
 80027da:	e005      	b.n	80027e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80027dc:	4b19      	ldr	r3, [pc, #100]	@ (8002844 <HAL_RCC_GetSysClockFreq+0x114>)
 80027de:	617b      	str	r3, [r7, #20]
      break;
 80027e0:	e002      	b.n	80027e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	617b      	str	r3, [r7, #20]
      break;
 80027e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027e8:	4b13      	ldr	r3, [pc, #76]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x108>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	091b      	lsrs	r3, r3, #4
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	3301      	adds	r3, #1
 80027f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80027f6:	4b10      	ldr	r3, [pc, #64]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x108>)
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	0a1b      	lsrs	r3, r3, #8
 80027fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	fb03 f202 	mul.w	r2, r3, r2
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	fbb2 f3f3 	udiv	r3, r2, r3
 800280c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800280e:	4b0a      	ldr	r3, [pc, #40]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x108>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	0e5b      	lsrs	r3, r3, #25
 8002814:	f003 0303 	and.w	r3, r3, #3
 8002818:	3301      	adds	r3, #1
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	fbb2 f3f3 	udiv	r3, r2, r3
 8002826:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002828:	69bb      	ldr	r3, [r7, #24]
}
 800282a:	4618      	mov	r0, r3
 800282c:	3724      	adds	r7, #36	@ 0x24
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	40021000 	.word	0x40021000
 800283c:	08004ed0 	.word	0x08004ed0
 8002840:	00f42400 	.word	0x00f42400
 8002844:	007a1200 	.word	0x007a1200

08002848 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800284c:	4b03      	ldr	r3, [pc, #12]	@ (800285c <HAL_RCC_GetHCLKFreq+0x14>)
 800284e:	681b      	ldr	r3, [r3, #0]
}
 8002850:	4618      	mov	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	20040004 	.word	0x20040004

08002860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002864:	f7ff fff0 	bl	8002848 <HAL_RCC_GetHCLKFreq>
 8002868:	4602      	mov	r2, r0
 800286a:	4b06      	ldr	r3, [pc, #24]	@ (8002884 <HAL_RCC_GetPCLK1Freq+0x24>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	0a1b      	lsrs	r3, r3, #8
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	4904      	ldr	r1, [pc, #16]	@ (8002888 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002876:	5ccb      	ldrb	r3, [r1, r3]
 8002878:	f003 031f 	and.w	r3, r3, #31
 800287c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002880:	4618      	mov	r0, r3
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40021000 	.word	0x40021000
 8002888:	08004ec8 	.word	0x08004ec8

0800288c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002890:	f7ff ffda 	bl	8002848 <HAL_RCC_GetHCLKFreq>
 8002894:	4602      	mov	r2, r0
 8002896:	4b06      	ldr	r3, [pc, #24]	@ (80028b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	0adb      	lsrs	r3, r3, #11
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	4904      	ldr	r1, [pc, #16]	@ (80028b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028a2:	5ccb      	ldrb	r3, [r1, r3]
 80028a4:	f003 031f 	and.w	r3, r3, #31
 80028a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40021000 	.word	0x40021000
 80028b4:	08004ec8 	.word	0x08004ec8

080028b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028c0:	2300      	movs	r3, #0
 80028c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028c4:	4b27      	ldr	r3, [pc, #156]	@ (8002964 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80028c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80028d0:	f7ff f906 	bl	8001ae0 <HAL_PWREx_GetVoltageRange>
 80028d4:	6178      	str	r0, [r7, #20]
 80028d6:	e014      	b.n	8002902 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028d8:	4b22      	ldr	r3, [pc, #136]	@ (8002964 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80028da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028dc:	4a21      	ldr	r2, [pc, #132]	@ (8002964 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80028de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80028e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002964 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80028e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80028f0:	f7ff f8f6 	bl	8001ae0 <HAL_PWREx_GetVoltageRange>
 80028f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80028f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002964 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80028f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028fa:	4a1a      	ldr	r2, [pc, #104]	@ (8002964 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80028fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002900:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002908:	d10b      	bne.n	8002922 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b80      	cmp	r3, #128	@ 0x80
 800290e:	d913      	bls.n	8002938 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2ba0      	cmp	r3, #160	@ 0xa0
 8002914:	d902      	bls.n	800291c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002916:	2302      	movs	r3, #2
 8002918:	613b      	str	r3, [r7, #16]
 800291a:	e00d      	b.n	8002938 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800291c:	2301      	movs	r3, #1
 800291e:	613b      	str	r3, [r7, #16]
 8002920:	e00a      	b.n	8002938 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b7f      	cmp	r3, #127	@ 0x7f
 8002926:	d902      	bls.n	800292e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002928:	2302      	movs	r3, #2
 800292a:	613b      	str	r3, [r7, #16]
 800292c:	e004      	b.n	8002938 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b70      	cmp	r3, #112	@ 0x70
 8002932:	d101      	bne.n	8002938 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002934:	2301      	movs	r3, #1
 8002936:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002938:	4b0b      	ldr	r3, [pc, #44]	@ (8002968 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f023 020f 	bic.w	r2, r3, #15
 8002940:	4909      	ldr	r1, [pc, #36]	@ (8002968 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	4313      	orrs	r3, r2
 8002946:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002948:	4b07      	ldr	r3, [pc, #28]	@ (8002968 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 030f 	and.w	r3, r3, #15
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	429a      	cmp	r2, r3
 8002954:	d001      	beq.n	800295a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e000      	b.n	800295c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3718      	adds	r7, #24
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40021000 	.word	0x40021000
 8002968:	40022000 	.word	0x40022000

0800296c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800296c:	b480      	push	{r7}
 800296e:	b087      	sub	sp, #28
 8002970:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002972:	4b2d      	ldr	r3, [pc, #180]	@ (8002a28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2b03      	cmp	r3, #3
 8002980:	d00b      	beq.n	800299a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2b03      	cmp	r3, #3
 8002986:	d825      	bhi.n	80029d4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d008      	beq.n	80029a0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2b02      	cmp	r3, #2
 8002992:	d11f      	bne.n	80029d4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002994:	4b25      	ldr	r3, [pc, #148]	@ (8002a2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002996:	613b      	str	r3, [r7, #16]
    break;
 8002998:	e01f      	b.n	80029da <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800299a:	4b25      	ldr	r3, [pc, #148]	@ (8002a30 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800299c:	613b      	str	r3, [r7, #16]
    break;
 800299e:	e01c      	b.n	80029da <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029a0:	4b21      	ldr	r3, [pc, #132]	@ (8002a28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0308 	and.w	r3, r3, #8
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d107      	bne.n	80029bc <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002a28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80029ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029b2:	0a1b      	lsrs	r3, r3, #8
 80029b4:	f003 030f 	and.w	r3, r3, #15
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	e005      	b.n	80029c8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002a28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	091b      	lsrs	r3, r3, #4
 80029c2:	f003 030f 	and.w	r3, r3, #15
 80029c6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80029c8:	4a1a      	ldr	r2, [pc, #104]	@ (8002a34 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029d0:	613b      	str	r3, [r7, #16]
    break;
 80029d2:	e002      	b.n	80029da <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80029d4:	2300      	movs	r3, #0
 80029d6:	613b      	str	r3, [r7, #16]
    break;
 80029d8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029da:	4b13      	ldr	r3, [pc, #76]	@ (8002a28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	091b      	lsrs	r3, r3, #4
 80029e0:	f003 030f 	and.w	r3, r3, #15
 80029e4:	3301      	adds	r3, #1
 80029e6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80029e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002a28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	0a1b      	lsrs	r3, r3, #8
 80029ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	fb03 f202 	mul.w	r2, r3, r2
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fe:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a00:	4b09      	ldr	r3, [pc, #36]	@ (8002a28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	0e5b      	lsrs	r3, r3, #25
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a18:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002a1a:	683b      	ldr	r3, [r7, #0]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	371c      	adds	r7, #28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	00f42400 	.word	0x00f42400
 8002a30:	007a1200 	.word	0x007a1200
 8002a34:	08004ed0 	.word	0x08004ed0

08002a38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a40:	2300      	movs	r3, #0
 8002a42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a44:	2300      	movs	r3, #0
 8002a46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d040      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a58:	2b80      	cmp	r3, #128	@ 0x80
 8002a5a:	d02a      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002a5c:	2b80      	cmp	r3, #128	@ 0x80
 8002a5e:	d825      	bhi.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002a60:	2b60      	cmp	r3, #96	@ 0x60
 8002a62:	d026      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002a64:	2b60      	cmp	r3, #96	@ 0x60
 8002a66:	d821      	bhi.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002a68:	2b40      	cmp	r3, #64	@ 0x40
 8002a6a:	d006      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002a6c:	2b40      	cmp	r3, #64	@ 0x40
 8002a6e:	d81d      	bhi.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d009      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002a74:	2b20      	cmp	r3, #32
 8002a76:	d010      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002a78:	e018      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a7a:	4b89      	ldr	r3, [pc, #548]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	4a88      	ldr	r2, [pc, #544]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a84:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a86:	e015      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 fb02 	bl	8003098 <RCCEx_PLLSAI1_Config>
 8002a94:	4603      	mov	r3, r0
 8002a96:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a98:	e00c      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	3320      	adds	r3, #32
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 fbed 	bl	8003280 <RCCEx_PLLSAI2_Config>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002aaa:	e003      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	74fb      	strb	r3, [r7, #19]
      break;
 8002ab0:	e000      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002ab2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ab4:	7cfb      	ldrb	r3, [r7, #19]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10b      	bne.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002aba:	4b79      	ldr	r3, [pc, #484]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002abc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ac0:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ac8:	4975      	ldr	r1, [pc, #468]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8002ad0:	e001      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ad2:	7cfb      	ldrb	r3, [r7, #19]
 8002ad4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d047      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002aea:	d030      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002aec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002af0:	d82a      	bhi.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002af2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002af6:	d02a      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002af8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002afc:	d824      	bhi.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002afe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b02:	d008      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002b04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b08:	d81e      	bhi.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002b0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b12:	d010      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002b14:	e018      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b16:	4b62      	ldr	r3, [pc, #392]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	4a61      	ldr	r2, [pc, #388]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b20:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b22:	e015      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3304      	adds	r3, #4
 8002b28:	2100      	movs	r1, #0
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 fab4 	bl	8003098 <RCCEx_PLLSAI1_Config>
 8002b30:	4603      	mov	r3, r0
 8002b32:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b34:	e00c      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	3320      	adds	r3, #32
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f000 fb9f 	bl	8003280 <RCCEx_PLLSAI2_Config>
 8002b42:	4603      	mov	r3, r0
 8002b44:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b46:	e003      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	74fb      	strb	r3, [r7, #19]
      break;
 8002b4c:	e000      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002b4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b50:	7cfb      	ldrb	r3, [r7, #19]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10b      	bne.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b56:	4b52      	ldr	r3, [pc, #328]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b64:	494e      	ldr	r1, [pc, #312]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8002b6c:	e001      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b6e:	7cfb      	ldrb	r3, [r7, #19]
 8002b70:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 809f 	beq.w	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b80:	2300      	movs	r3, #0
 8002b82:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b84:	4b46      	ldr	r3, [pc, #280]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002b90:	2301      	movs	r3, #1
 8002b92:	e000      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002b94:	2300      	movs	r3, #0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00d      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b9a:	4b41      	ldr	r3, [pc, #260]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b9e:	4a40      	ldr	r2, [pc, #256]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ba4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ba6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bae:	60bb      	str	r3, [r7, #8]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bb6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a3a      	ldr	r2, [pc, #232]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002bbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bc0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bc2:	f7fe f9af 	bl	8000f24 <HAL_GetTick>
 8002bc6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bc8:	e009      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bca:	f7fe f9ab 	bl	8000f24 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d902      	bls.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	74fb      	strb	r3, [r7, #19]
        break;
 8002bdc:	e005      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bde:	4b31      	ldr	r3, [pc, #196]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0ef      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002bea:	7cfb      	ldrb	r3, [r7, #19]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d15b      	bne.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002bf0:	4b2b      	ldr	r3, [pc, #172]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bfa:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d01f      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d019      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c0e:	4b24      	ldr	r3, [pc, #144]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c18:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c1a:	4b21      	ldr	r3, [pc, #132]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c20:	4a1f      	ldr	r2, [pc, #124]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c30:	4a1b      	ldr	r2, [pc, #108]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c36:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c3a:	4a19      	ldr	r2, [pc, #100]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d016      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4c:	f7fe f96a 	bl	8000f24 <HAL_GetTick>
 8002c50:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c52:	e00b      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c54:	f7fe f966 	bl	8000f24 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d902      	bls.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	74fb      	strb	r3, [r7, #19]
            break;
 8002c6a:	e006      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0ec      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002c7a:	7cfb      	ldrb	r3, [r7, #19]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10c      	bne.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c80:	4b07      	ldr	r3, [pc, #28]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c86:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c90:	4903      	ldr	r1, [pc, #12]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002c98:	e008      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c9a:	7cfb      	ldrb	r3, [r7, #19]
 8002c9c:	74bb      	strb	r3, [r7, #18]
 8002c9e:	e005      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ca8:	7cfb      	ldrb	r3, [r7, #19]
 8002caa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cac:	7c7b      	ldrb	r3, [r7, #17]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d105      	bne.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb2:	4ba0      	ldr	r3, [pc, #640]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb6:	4a9f      	ldr	r2, [pc, #636]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cbc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00a      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cca:	4b9a      	ldr	r3, [pc, #616]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd0:	f023 0203 	bic.w	r2, r3, #3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cd8:	4996      	ldr	r1, [pc, #600]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00a      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cec:	4b91      	ldr	r3, [pc, #580]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cf2:	f023 020c 	bic.w	r2, r3, #12
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfa:	498e      	ldr	r1, [pc, #568]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00a      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d0e:	4b89      	ldr	r3, [pc, #548]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d14:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1c:	4985      	ldr	r1, [pc, #532]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0308 	and.w	r3, r3, #8
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00a      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d30:	4b80      	ldr	r3, [pc, #512]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d36:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d3e:	497d      	ldr	r1, [pc, #500]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0310 	and.w	r3, r3, #16
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d52:	4b78      	ldr	r3, [pc, #480]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d60:	4974      	ldr	r1, [pc, #464]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0320 	and.w	r3, r3, #32
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00a      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d74:	4b6f      	ldr	r3, [pc, #444]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d7a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d82:	496c      	ldr	r1, [pc, #432]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00a      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d96:	4b67      	ldr	r3, [pc, #412]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d9c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002da4:	4963      	ldr	r1, [pc, #396]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00a      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002db8:	4b5e      	ldr	r3, [pc, #376]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dbe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dc6:	495b      	ldr	r1, [pc, #364]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00a      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dda:	4b56      	ldr	r3, [pc, #344]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002de0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002de8:	4952      	ldr	r1, [pc, #328]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00a      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002dfc:	4b4d      	ldr	r3, [pc, #308]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e02:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e0a:	494a      	ldr	r1, [pc, #296]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00a      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e1e:	4b45      	ldr	r3, [pc, #276]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e24:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e2c:	4941      	ldr	r1, [pc, #260]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00a      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e40:	4b3c      	ldr	r3, [pc, #240]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e46:	f023 0203 	bic.w	r2, r3, #3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e4e:	4939      	ldr	r1, [pc, #228]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d028      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e62:	4b34      	ldr	r3, [pc, #208]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e68:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e70:	4930      	ldr	r1, [pc, #192]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e80:	d106      	bne.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e82:	4b2c      	ldr	r3, [pc, #176]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	4a2b      	ldr	r2, [pc, #172]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e8c:	60d3      	str	r3, [r2, #12]
 8002e8e:	e011      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e94:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e98:	d10c      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 f8f9 	bl	8003098 <RCCEx_PLLSAI1_Config>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002eaa:	7cfb      	ldrb	r3, [r7, #19]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002eb0:	7cfb      	ldrb	r3, [r7, #19]
 8002eb2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d04d      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ec4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ec8:	d108      	bne.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002eca:	4b1a      	ldr	r3, [pc, #104]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ecc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ed0:	4a18      	ldr	r2, [pc, #96]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ed2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ed6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002eda:	e012      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002edc:	4b15      	ldr	r3, [pc, #84]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ede:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ee2:	4a14      	ldr	r2, [pc, #80]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ee4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ee8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002eec:	4b11      	ldr	r3, [pc, #68]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002efa:	490e      	ldr	r1, [pc, #56]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f0a:	d106      	bne.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f0c:	4b09      	ldr	r3, [pc, #36]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	4a08      	ldr	r2, [pc, #32]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f16:	60d3      	str	r3, [r2, #12]
 8002f18:	e020      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f22:	d109      	bne.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f24:	4b03      	ldr	r3, [pc, #12]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	4a02      	ldr	r2, [pc, #8]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f2e:	60d3      	str	r3, [r2, #12]
 8002f30:	e014      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002f32:	bf00      	nop
 8002f34:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f3c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f40:	d10c      	bne.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	3304      	adds	r3, #4
 8002f46:	2101      	movs	r1, #1
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 f8a5 	bl	8003098 <RCCEx_PLLSAI1_Config>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f52:	7cfb      	ldrb	r3, [r7, #19]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002f58:	7cfb      	ldrb	r3, [r7, #19]
 8002f5a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d028      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f68:	4b4a      	ldr	r3, [pc, #296]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f6e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f76:	4947      	ldr	r1, [pc, #284]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f86:	d106      	bne.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f88:	4b42      	ldr	r3, [pc, #264]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	4a41      	ldr	r2, [pc, #260]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f92:	60d3      	str	r3, [r2, #12]
 8002f94:	e011      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f9a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f9e:	d10c      	bne.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3304      	adds	r3, #4
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 f876 	bl	8003098 <RCCEx_PLLSAI1_Config>
 8002fac:	4603      	mov	r3, r0
 8002fae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fb0:	7cfb      	ldrb	r3, [r7, #19]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002fb6:	7cfb      	ldrb	r3, [r7, #19]
 8002fb8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d01e      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fc6:	4b33      	ldr	r3, [pc, #204]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fcc:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fd6:	492f      	ldr	r1, [pc, #188]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fe4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002fe8:	d10c      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	3304      	adds	r3, #4
 8002fee:	2102      	movs	r1, #2
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f000 f851 	bl	8003098 <RCCEx_PLLSAI1_Config>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ffa:	7cfb      	ldrb	r3, [r7, #19]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003000:	7cfb      	ldrb	r3, [r7, #19]
 8003002:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00b      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003010:	4b20      	ldr	r3, [pc, #128]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003012:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003016:	f023 0204 	bic.w	r2, r3, #4
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003020:	491c      	ldr	r1, [pc, #112]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00b      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003034:	4b17      	ldr	r3, [pc, #92]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003036:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800303a:	f023 0218 	bic.w	r2, r3, #24
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003044:	4913      	ldr	r1, [pc, #76]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003046:	4313      	orrs	r3, r2
 8003048:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d017      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003058:	4b0e      	ldr	r3, [pc, #56]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800305a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800305e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003068:	490a      	ldr	r1, [pc, #40]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800306a:	4313      	orrs	r3, r2
 800306c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003076:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800307a:	d105      	bne.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800307c:	4b05      	ldr	r3, [pc, #20]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	4a04      	ldr	r2, [pc, #16]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003082:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003086:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003088:	7cbb      	ldrb	r3, [r7, #18]
}
 800308a:	4618      	mov	r0, r3
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	40021000 	.word	0x40021000

08003098 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030a6:	4b72      	ldr	r3, [pc, #456]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f003 0303 	and.w	r3, r3, #3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00e      	beq.n	80030d0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80030b2:	4b6f      	ldr	r3, [pc, #444]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	f003 0203 	and.w	r2, r3, #3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d103      	bne.n	80030ca <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
       ||
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d142      	bne.n	8003150 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	73fb      	strb	r3, [r7, #15]
 80030ce:	e03f      	b.n	8003150 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b03      	cmp	r3, #3
 80030d6:	d018      	beq.n	800310a <RCCEx_PLLSAI1_Config+0x72>
 80030d8:	2b03      	cmp	r3, #3
 80030da:	d825      	bhi.n	8003128 <RCCEx_PLLSAI1_Config+0x90>
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d002      	beq.n	80030e6 <RCCEx_PLLSAI1_Config+0x4e>
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d009      	beq.n	80030f8 <RCCEx_PLLSAI1_Config+0x60>
 80030e4:	e020      	b.n	8003128 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030e6:	4b62      	ldr	r3, [pc, #392]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d11d      	bne.n	800312e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030f6:	e01a      	b.n	800312e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030f8:	4b5d      	ldr	r3, [pc, #372]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003100:	2b00      	cmp	r3, #0
 8003102:	d116      	bne.n	8003132 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003108:	e013      	b.n	8003132 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800310a:	4b59      	ldr	r3, [pc, #356]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1d8>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10f      	bne.n	8003136 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003116:	4b56      	ldr	r3, [pc, #344]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d109      	bne.n	8003136 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003126:	e006      	b.n	8003136 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	73fb      	strb	r3, [r7, #15]
      break;
 800312c:	e004      	b.n	8003138 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800312e:	bf00      	nop
 8003130:	e002      	b.n	8003138 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003132:	bf00      	nop
 8003134:	e000      	b.n	8003138 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003136:	bf00      	nop
    }

    if(status == HAL_OK)
 8003138:	7bfb      	ldrb	r3, [r7, #15]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d108      	bne.n	8003150 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800313e:	4b4c      	ldr	r3, [pc, #304]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	f023 0203 	bic.w	r2, r3, #3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4949      	ldr	r1, [pc, #292]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1d8>)
 800314c:	4313      	orrs	r3, r2
 800314e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003150:	7bfb      	ldrb	r3, [r7, #15]
 8003152:	2b00      	cmp	r3, #0
 8003154:	f040 8086 	bne.w	8003264 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003158:	4b45      	ldr	r3, [pc, #276]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1d8>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a44      	ldr	r2, [pc, #272]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1d8>)
 800315e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003162:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003164:	f7fd fede 	bl	8000f24 <HAL_GetTick>
 8003168:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800316a:	e009      	b.n	8003180 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800316c:	f7fd feda 	bl	8000f24 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d902      	bls.n	8003180 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	73fb      	strb	r3, [r7, #15]
        break;
 800317e:	e005      	b.n	800318c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003180:	4b3b      	ldr	r3, [pc, #236]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1ef      	bne.n	800316c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800318c:	7bfb      	ldrb	r3, [r7, #15]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d168      	bne.n	8003264 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d113      	bne.n	80031c0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003198:	4b35      	ldr	r3, [pc, #212]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1d8>)
 800319a:	691a      	ldr	r2, [r3, #16]
 800319c:	4b35      	ldr	r3, [pc, #212]	@ (8003274 <RCCEx_PLLSAI1_Config+0x1dc>)
 800319e:	4013      	ands	r3, r2
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6892      	ldr	r2, [r2, #8]
 80031a4:	0211      	lsls	r1, r2, #8
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	68d2      	ldr	r2, [r2, #12]
 80031aa:	06d2      	lsls	r2, r2, #27
 80031ac:	4311      	orrs	r1, r2
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6852      	ldr	r2, [r2, #4]
 80031b2:	3a01      	subs	r2, #1
 80031b4:	0112      	lsls	r2, r2, #4
 80031b6:	430a      	orrs	r2, r1
 80031b8:	492d      	ldr	r1, [pc, #180]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	610b      	str	r3, [r1, #16]
 80031be:	e02d      	b.n	800321c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d115      	bne.n	80031f2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031c6:	4b2a      	ldr	r3, [pc, #168]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031c8:	691a      	ldr	r2, [r3, #16]
 80031ca:	4b2b      	ldr	r3, [pc, #172]	@ (8003278 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031cc:	4013      	ands	r3, r2
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	6892      	ldr	r2, [r2, #8]
 80031d2:	0211      	lsls	r1, r2, #8
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	6912      	ldr	r2, [r2, #16]
 80031d8:	0852      	lsrs	r2, r2, #1
 80031da:	3a01      	subs	r2, #1
 80031dc:	0552      	lsls	r2, r2, #21
 80031de:	4311      	orrs	r1, r2
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6852      	ldr	r2, [r2, #4]
 80031e4:	3a01      	subs	r2, #1
 80031e6:	0112      	lsls	r2, r2, #4
 80031e8:	430a      	orrs	r2, r1
 80031ea:	4921      	ldr	r1, [pc, #132]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	610b      	str	r3, [r1, #16]
 80031f0:	e014      	b.n	800321c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031f2:	4b1f      	ldr	r3, [pc, #124]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031f4:	691a      	ldr	r2, [r3, #16]
 80031f6:	4b21      	ldr	r3, [pc, #132]	@ (800327c <RCCEx_PLLSAI1_Config+0x1e4>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6892      	ldr	r2, [r2, #8]
 80031fe:	0211      	lsls	r1, r2, #8
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	6952      	ldr	r2, [r2, #20]
 8003204:	0852      	lsrs	r2, r2, #1
 8003206:	3a01      	subs	r2, #1
 8003208:	0652      	lsls	r2, r2, #25
 800320a:	4311      	orrs	r1, r2
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	6852      	ldr	r2, [r2, #4]
 8003210:	3a01      	subs	r2, #1
 8003212:	0112      	lsls	r2, r2, #4
 8003214:	430a      	orrs	r2, r1
 8003216:	4916      	ldr	r1, [pc, #88]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003218:	4313      	orrs	r3, r2
 800321a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800321c:	4b14      	ldr	r3, [pc, #80]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1d8>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a13      	ldr	r2, [pc, #76]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003222:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003226:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003228:	f7fd fe7c 	bl	8000f24 <HAL_GetTick>
 800322c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800322e:	e009      	b.n	8003244 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003230:	f7fd fe78 	bl	8000f24 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d902      	bls.n	8003244 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	73fb      	strb	r3, [r7, #15]
          break;
 8003242:	e005      	b.n	8003250 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003244:	4b0a      	ldr	r3, [pc, #40]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0ef      	beq.n	8003230 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003250:	7bfb      	ldrb	r3, [r7, #15]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d106      	bne.n	8003264 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003256:	4b06      	ldr	r3, [pc, #24]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003258:	691a      	ldr	r2, [r3, #16]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	4904      	ldr	r1, [pc, #16]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003260:	4313      	orrs	r3, r2
 8003262:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003264:	7bfb      	ldrb	r3, [r7, #15]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40021000 	.word	0x40021000
 8003274:	07ff800f 	.word	0x07ff800f
 8003278:	ff9f800f 	.word	0xff9f800f
 800327c:	f9ff800f 	.word	0xf9ff800f

08003280 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800328a:	2300      	movs	r3, #0
 800328c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800328e:	4b72      	ldr	r3, [pc, #456]	@ (8003458 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00e      	beq.n	80032b8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800329a:	4b6f      	ldr	r3, [pc, #444]	@ (8003458 <RCCEx_PLLSAI2_Config+0x1d8>)
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	f003 0203 	and.w	r2, r3, #3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d103      	bne.n	80032b2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
       ||
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d142      	bne.n	8003338 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	73fb      	strb	r3, [r7, #15]
 80032b6:	e03f      	b.n	8003338 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2b03      	cmp	r3, #3
 80032be:	d018      	beq.n	80032f2 <RCCEx_PLLSAI2_Config+0x72>
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	d825      	bhi.n	8003310 <RCCEx_PLLSAI2_Config+0x90>
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d002      	beq.n	80032ce <RCCEx_PLLSAI2_Config+0x4e>
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d009      	beq.n	80032e0 <RCCEx_PLLSAI2_Config+0x60>
 80032cc:	e020      	b.n	8003310 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032ce:	4b62      	ldr	r3, [pc, #392]	@ (8003458 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d11d      	bne.n	8003316 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032de:	e01a      	b.n	8003316 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032e0:	4b5d      	ldr	r3, [pc, #372]	@ (8003458 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d116      	bne.n	800331a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032f0:	e013      	b.n	800331a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80032f2:	4b59      	ldr	r3, [pc, #356]	@ (8003458 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10f      	bne.n	800331e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80032fe:	4b56      	ldr	r3, [pc, #344]	@ (8003458 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d109      	bne.n	800331e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800330e:	e006      	b.n	800331e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	73fb      	strb	r3, [r7, #15]
      break;
 8003314:	e004      	b.n	8003320 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003316:	bf00      	nop
 8003318:	e002      	b.n	8003320 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800331a:	bf00      	nop
 800331c:	e000      	b.n	8003320 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800331e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003320:	7bfb      	ldrb	r3, [r7, #15]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d108      	bne.n	8003338 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003326:	4b4c      	ldr	r3, [pc, #304]	@ (8003458 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f023 0203 	bic.w	r2, r3, #3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4949      	ldr	r1, [pc, #292]	@ (8003458 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003334:	4313      	orrs	r3, r2
 8003336:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003338:	7bfb      	ldrb	r3, [r7, #15]
 800333a:	2b00      	cmp	r3, #0
 800333c:	f040 8086 	bne.w	800344c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003340:	4b45      	ldr	r3, [pc, #276]	@ (8003458 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a44      	ldr	r2, [pc, #272]	@ (8003458 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003346:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800334a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800334c:	f7fd fdea 	bl	8000f24 <HAL_GetTick>
 8003350:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003352:	e009      	b.n	8003368 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003354:	f7fd fde6 	bl	8000f24 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d902      	bls.n	8003368 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	73fb      	strb	r3, [r7, #15]
        break;
 8003366:	e005      	b.n	8003374 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003368:	4b3b      	ldr	r3, [pc, #236]	@ (8003458 <RCCEx_PLLSAI2_Config+0x1d8>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1ef      	bne.n	8003354 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003374:	7bfb      	ldrb	r3, [r7, #15]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d168      	bne.n	800344c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d113      	bne.n	80033a8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003380:	4b35      	ldr	r3, [pc, #212]	@ (8003458 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003382:	695a      	ldr	r2, [r3, #20]
 8003384:	4b35      	ldr	r3, [pc, #212]	@ (800345c <RCCEx_PLLSAI2_Config+0x1dc>)
 8003386:	4013      	ands	r3, r2
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6892      	ldr	r2, [r2, #8]
 800338c:	0211      	lsls	r1, r2, #8
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	68d2      	ldr	r2, [r2, #12]
 8003392:	06d2      	lsls	r2, r2, #27
 8003394:	4311      	orrs	r1, r2
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	6852      	ldr	r2, [r2, #4]
 800339a:	3a01      	subs	r2, #1
 800339c:	0112      	lsls	r2, r2, #4
 800339e:	430a      	orrs	r2, r1
 80033a0:	492d      	ldr	r1, [pc, #180]	@ (8003458 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	614b      	str	r3, [r1, #20]
 80033a6:	e02d      	b.n	8003404 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d115      	bne.n	80033da <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003458 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033b0:	695a      	ldr	r2, [r3, #20]
 80033b2:	4b2b      	ldr	r3, [pc, #172]	@ (8003460 <RCCEx_PLLSAI2_Config+0x1e0>)
 80033b4:	4013      	ands	r3, r2
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6892      	ldr	r2, [r2, #8]
 80033ba:	0211      	lsls	r1, r2, #8
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6912      	ldr	r2, [r2, #16]
 80033c0:	0852      	lsrs	r2, r2, #1
 80033c2:	3a01      	subs	r2, #1
 80033c4:	0552      	lsls	r2, r2, #21
 80033c6:	4311      	orrs	r1, r2
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6852      	ldr	r2, [r2, #4]
 80033cc:	3a01      	subs	r2, #1
 80033ce:	0112      	lsls	r2, r2, #4
 80033d0:	430a      	orrs	r2, r1
 80033d2:	4921      	ldr	r1, [pc, #132]	@ (8003458 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	614b      	str	r3, [r1, #20]
 80033d8:	e014      	b.n	8003404 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033da:	4b1f      	ldr	r3, [pc, #124]	@ (8003458 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033dc:	695a      	ldr	r2, [r3, #20]
 80033de:	4b21      	ldr	r3, [pc, #132]	@ (8003464 <RCCEx_PLLSAI2_Config+0x1e4>)
 80033e0:	4013      	ands	r3, r2
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6892      	ldr	r2, [r2, #8]
 80033e6:	0211      	lsls	r1, r2, #8
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	6952      	ldr	r2, [r2, #20]
 80033ec:	0852      	lsrs	r2, r2, #1
 80033ee:	3a01      	subs	r2, #1
 80033f0:	0652      	lsls	r2, r2, #25
 80033f2:	4311      	orrs	r1, r2
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6852      	ldr	r2, [r2, #4]
 80033f8:	3a01      	subs	r2, #1
 80033fa:	0112      	lsls	r2, r2, #4
 80033fc:	430a      	orrs	r2, r1
 80033fe:	4916      	ldr	r1, [pc, #88]	@ (8003458 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003400:	4313      	orrs	r3, r2
 8003402:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003404:	4b14      	ldr	r3, [pc, #80]	@ (8003458 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a13      	ldr	r2, [pc, #76]	@ (8003458 <RCCEx_PLLSAI2_Config+0x1d8>)
 800340a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800340e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003410:	f7fd fd88 	bl	8000f24 <HAL_GetTick>
 8003414:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003416:	e009      	b.n	800342c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003418:	f7fd fd84 	bl	8000f24 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d902      	bls.n	800342c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	73fb      	strb	r3, [r7, #15]
          break;
 800342a:	e005      	b.n	8003438 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800342c:	4b0a      	ldr	r3, [pc, #40]	@ (8003458 <RCCEx_PLLSAI2_Config+0x1d8>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0ef      	beq.n	8003418 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003438:	7bfb      	ldrb	r3, [r7, #15]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d106      	bne.n	800344c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800343e:	4b06      	ldr	r3, [pc, #24]	@ (8003458 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003440:	695a      	ldr	r2, [r3, #20]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	4904      	ldr	r1, [pc, #16]	@ (8003458 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003448:	4313      	orrs	r3, r2
 800344a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800344c:	7bfb      	ldrb	r3, [r7, #15]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	40021000 	.word	0x40021000
 800345c:	07ff800f 	.word	0x07ff800f
 8003460:	ff9f800f 	.word	0xff9f800f
 8003464:	f9ff800f 	.word	0xf9ff800f

08003468 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e042      	b.n	8003500 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003480:	2b00      	cmp	r3, #0
 8003482:	d106      	bne.n	8003492 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f7fd fbcb 	bl	8000c28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2224      	movs	r2, #36	@ 0x24
 8003496:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0201 	bic.w	r2, r2, #1
 80034a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d002      	beq.n	80034b8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 ff6a 	bl	800438c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 fc6b 	bl	8003d94 <UART_SetConfig>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d101      	bne.n	80034c8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e01b      	b.n	8003500 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f042 0201 	orr.w	r2, r2, #1
 80034f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 ffe9 	bl	80044d0 <UART_CheckIdleState>
 80034fe:	4603      	mov	r3, r0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b08a      	sub	sp, #40	@ 0x28
 800350c:	af02      	add	r7, sp, #8
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	603b      	str	r3, [r7, #0]
 8003514:	4613      	mov	r3, r2
 8003516:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800351e:	2b20      	cmp	r3, #32
 8003520:	d17b      	bne.n	800361a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d002      	beq.n	800352e <HAL_UART_Transmit+0x26>
 8003528:	88fb      	ldrh	r3, [r7, #6]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e074      	b.n	800361c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2221      	movs	r2, #33	@ 0x21
 800353e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003542:	f7fd fcef 	bl	8000f24 <HAL_GetTick>
 8003546:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	88fa      	ldrh	r2, [r7, #6]
 800354c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	88fa      	ldrh	r2, [r7, #6]
 8003554:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003560:	d108      	bne.n	8003574 <HAL_UART_Transmit+0x6c>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d104      	bne.n	8003574 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800356a:	2300      	movs	r3, #0
 800356c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	61bb      	str	r3, [r7, #24]
 8003572:	e003      	b.n	800357c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003578:	2300      	movs	r3, #0
 800357a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800357c:	e030      	b.n	80035e0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	2200      	movs	r2, #0
 8003586:	2180      	movs	r1, #128	@ 0x80
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f001 f84b 	bl	8004624 <UART_WaitOnFlagUntilTimeout>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d005      	beq.n	80035a0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2220      	movs	r2, #32
 8003598:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e03d      	b.n	800361c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10b      	bne.n	80035be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	881a      	ldrh	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035b2:	b292      	uxth	r2, r2
 80035b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	3302      	adds	r3, #2
 80035ba:	61bb      	str	r3, [r7, #24]
 80035bc:	e007      	b.n	80035ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	781a      	ldrb	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	3301      	adds	r3, #1
 80035cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	3b01      	subs	r3, #1
 80035d8:	b29a      	uxth	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1c8      	bne.n	800357e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	2200      	movs	r2, #0
 80035f4:	2140      	movs	r1, #64	@ 0x40
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f001 f814 	bl	8004624 <UART_WaitOnFlagUntilTimeout>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d005      	beq.n	800360e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2220      	movs	r2, #32
 8003606:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e006      	b.n	800361c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2220      	movs	r2, #32
 8003612:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003616:	2300      	movs	r3, #0
 8003618:	e000      	b.n	800361c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800361a:	2302      	movs	r3, #2
  }
}
 800361c:	4618      	mov	r0, r3
 800361e:	3720      	adds	r7, #32
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b08a      	sub	sp, #40	@ 0x28
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	4613      	mov	r3, r2
 8003630:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003638:	2b20      	cmp	r3, #32
 800363a:	d137      	bne.n	80036ac <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d002      	beq.n	8003648 <HAL_UART_Receive_DMA+0x24>
 8003642:	88fb      	ldrh	r3, [r7, #6]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e030      	b.n	80036ae <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a18      	ldr	r2, [pc, #96]	@ (80036b8 <HAL_UART_Receive_DMA+0x94>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d01f      	beq.n	800369c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d018      	beq.n	800369c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	e853 3f00 	ldrex	r3, [r3]
 8003676:	613b      	str	r3, [r7, #16]
   return(result);
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800367e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	461a      	mov	r2, r3
 8003686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003688:	623b      	str	r3, [r7, #32]
 800368a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368c:	69f9      	ldr	r1, [r7, #28]
 800368e:	6a3a      	ldr	r2, [r7, #32]
 8003690:	e841 2300 	strex	r3, r2, [r1]
 8003694:	61bb      	str	r3, [r7, #24]
   return(result);
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1e6      	bne.n	800366a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800369c:	88fb      	ldrh	r3, [r7, #6]
 800369e:	461a      	mov	r2, r3
 80036a0:	68b9      	ldr	r1, [r7, #8]
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f001 f82c 	bl	8004700 <UART_Start_Receive_DMA>
 80036a8:	4603      	mov	r3, r0
 80036aa:	e000      	b.n	80036ae <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80036ac:	2302      	movs	r3, #2
  }
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3728      	adds	r7, #40	@ 0x28
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40008000 	.word	0x40008000

080036bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b0ba      	sub	sp, #232	@ 0xe8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80036e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80036e6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80036ea:	4013      	ands	r3, r2
 80036ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80036f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d11b      	bne.n	8003730 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80036f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036fc:	f003 0320 	and.w	r3, r3, #32
 8003700:	2b00      	cmp	r3, #0
 8003702:	d015      	beq.n	8003730 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003708:	f003 0320 	and.w	r3, r3, #32
 800370c:	2b00      	cmp	r3, #0
 800370e:	d105      	bne.n	800371c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003710:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003714:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d009      	beq.n	8003730 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 8300 	beq.w	8003d26 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	4798      	blx	r3
      }
      return;
 800372e:	e2fa      	b.n	8003d26 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8003730:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 8123 	beq.w	8003980 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800373a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800373e:	4b8d      	ldr	r3, [pc, #564]	@ (8003974 <HAL_UART_IRQHandler+0x2b8>)
 8003740:	4013      	ands	r3, r2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d106      	bne.n	8003754 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003746:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800374a:	4b8b      	ldr	r3, [pc, #556]	@ (8003978 <HAL_UART_IRQHandler+0x2bc>)
 800374c:	4013      	ands	r3, r2
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 8116 	beq.w	8003980 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b00      	cmp	r3, #0
 800375e:	d011      	beq.n	8003784 <HAL_UART_IRQHandler+0xc8>
 8003760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00b      	beq.n	8003784 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2201      	movs	r2, #1
 8003772:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800377a:	f043 0201 	orr.w	r2, r3, #1
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d011      	beq.n	80037b4 <HAL_UART_IRQHandler+0xf8>
 8003790:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00b      	beq.n	80037b4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2202      	movs	r2, #2
 80037a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037aa:	f043 0204 	orr.w	r2, r3, #4
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d011      	beq.n	80037e4 <HAL_UART_IRQHandler+0x128>
 80037c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00b      	beq.n	80037e4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2204      	movs	r2, #4
 80037d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037da:	f043 0202 	orr.w	r2, r3, #2
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80037e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037e8:	f003 0308 	and.w	r3, r3, #8
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d017      	beq.n	8003820 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80037f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037f4:	f003 0320 	and.w	r3, r3, #32
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d105      	bne.n	8003808 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80037fc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003800:	4b5c      	ldr	r3, [pc, #368]	@ (8003974 <HAL_UART_IRQHandler+0x2b8>)
 8003802:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00b      	beq.n	8003820 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2208      	movs	r2, #8
 800380e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003816:	f043 0208 	orr.w	r2, r3, #8
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003824:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003828:	2b00      	cmp	r3, #0
 800382a:	d012      	beq.n	8003852 <HAL_UART_IRQHandler+0x196>
 800382c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003830:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00c      	beq.n	8003852 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003840:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003848:	f043 0220 	orr.w	r2, r3, #32
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 8266 	beq.w	8003d2a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800385e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003862:	f003 0320 	and.w	r3, r3, #32
 8003866:	2b00      	cmp	r3, #0
 8003868:	d013      	beq.n	8003892 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800386a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800386e:	f003 0320 	and.w	r3, r3, #32
 8003872:	2b00      	cmp	r3, #0
 8003874:	d105      	bne.n	8003882 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003876:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800387a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d007      	beq.n	8003892 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003898:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a6:	2b40      	cmp	r3, #64	@ 0x40
 80038a8:	d005      	beq.n	80038b6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80038aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038ae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d054      	beq.n	8003960 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f001 f809 	bl	80048ce <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038c6:	2b40      	cmp	r3, #64	@ 0x40
 80038c8:	d146      	bne.n	8003958 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	3308      	adds	r3, #8
 80038d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80038d8:	e853 3f00 	ldrex	r3, [r3]
 80038dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80038e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80038e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	3308      	adds	r3, #8
 80038f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80038f6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80038fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003902:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003906:	e841 2300 	strex	r3, r2, [r1]
 800390a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800390e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1d9      	bne.n	80038ca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800391c:	2b00      	cmp	r3, #0
 800391e:	d017      	beq.n	8003950 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003926:	4a15      	ldr	r2, [pc, #84]	@ (800397c <HAL_UART_IRQHandler+0x2c0>)
 8003928:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003930:	4618      	mov	r0, r3
 8003932:	f7fd fd94 	bl	800145e <HAL_DMA_Abort_IT>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d019      	beq.n	8003970 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800394a:	4610      	mov	r0, r2
 800394c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800394e:	e00f      	b.n	8003970 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 fa09 	bl	8003d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003956:	e00b      	b.n	8003970 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 fa05 	bl	8003d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800395e:	e007      	b.n	8003970 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 fa01 	bl	8003d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800396e:	e1dc      	b.n	8003d2a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003970:	bf00      	nop
    return;
 8003972:	e1da      	b.n	8003d2a <HAL_UART_IRQHandler+0x66e>
 8003974:	10000001 	.word	0x10000001
 8003978:	04000120 	.word	0x04000120
 800397c:	08004b85 	.word	0x08004b85

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003984:	2b01      	cmp	r3, #1
 8003986:	f040 8170 	bne.w	8003c6a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800398a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800398e:	f003 0310 	and.w	r3, r3, #16
 8003992:	2b00      	cmp	r3, #0
 8003994:	f000 8169 	beq.w	8003c6a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800399c:	f003 0310 	and.w	r3, r3, #16
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 8162 	beq.w	8003c6a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2210      	movs	r2, #16
 80039ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039b8:	2b40      	cmp	r3, #64	@ 0x40
 80039ba:	f040 80d8 	bne.w	8003b6e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80039cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 80af 	beq.w	8003b34 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80039dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039e0:	429a      	cmp	r2, r3
 80039e2:	f080 80a7 	bcs.w	8003b34 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0320 	and.w	r3, r3, #32
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f040 8087 	bne.w	8003b12 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a10:	e853 3f00 	ldrex	r3, [r3]
 8003a14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003a18:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003a2e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a32:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a36:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003a3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a3e:	e841 2300 	strex	r3, r2, [r1]
 8003a42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003a46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1da      	bne.n	8003a04 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	3308      	adds	r3, #8
 8003a54:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a58:	e853 3f00 	ldrex	r3, [r3]
 8003a5c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003a5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a60:	f023 0301 	bic.w	r3, r3, #1
 8003a64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	3308      	adds	r3, #8
 8003a6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a72:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003a76:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a78:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003a7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a7e:	e841 2300 	strex	r3, r2, [r1]
 8003a82:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003a84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1e1      	bne.n	8003a4e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3308      	adds	r3, #8
 8003a90:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a94:	e853 3f00 	ldrex	r3, [r3]
 8003a98:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003aa0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	3308      	adds	r3, #8
 8003aaa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003aae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003ab0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003ab4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003ab6:	e841 2300 	strex	r3, r2, [r1]
 8003aba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003abc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1e3      	bne.n	8003a8a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ad8:	e853 3f00 	ldrex	r3, [r3]
 8003adc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003ade:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ae0:	f023 0310 	bic.w	r3, r3, #16
 8003ae4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	461a      	mov	r2, r3
 8003aee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003af2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003af4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003af8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003afa:	e841 2300 	strex	r3, r2, [r1]
 8003afe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1e4      	bne.n	8003ad0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fd fc4a 	bl	80013a6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2202      	movs	r2, #2
 8003b16:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f925 	bl	8003d7c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003b32:	e0fc      	b.n	8003d2e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003b3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	f040 80f5 	bne.w	8003d2e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0320 	and.w	r3, r3, #32
 8003b52:	2b20      	cmp	r3, #32
 8003b54:	f040 80eb 	bne.w	8003d2e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003b64:	4619      	mov	r1, r3
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f908 	bl	8003d7c <HAL_UARTEx_RxEventCallback>
      return;
 8003b6c:	e0df      	b.n	8003d2e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 80d1 	beq.w	8003d32 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8003b90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 80cc 	beq.w	8003d32 <HAL_UART_IRQHandler+0x676>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ba2:	e853 3f00 	ldrex	r3, [r3]
 8003ba6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003baa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003bbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bbe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003bc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bc4:	e841 2300 	strex	r3, r2, [r1]
 8003bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003bca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1e4      	bne.n	8003b9a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3308      	adds	r3, #8
 8003bd6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bda:	e853 3f00 	ldrex	r3, [r3]
 8003bde:	623b      	str	r3, [r7, #32]
   return(result);
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003be6:	f023 0301 	bic.w	r3, r3, #1
 8003bea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	3308      	adds	r3, #8
 8003bf4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003bf8:	633a      	str	r2, [r7, #48]	@ 0x30
 8003bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c00:	e841 2300 	strex	r3, r2, [r1]
 8003c04:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1e1      	bne.n	8003bd0 <HAL_UART_IRQHandler+0x514>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	e853 3f00 	ldrex	r3, [r3]
 8003c2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f023 0310 	bic.w	r3, r3, #16
 8003c34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c42:	61fb      	str	r3, [r7, #28]
 8003c44:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c46:	69b9      	ldr	r1, [r7, #24]
 8003c48:	69fa      	ldr	r2, [r7, #28]
 8003c4a:	e841 2300 	strex	r3, r2, [r1]
 8003c4e:	617b      	str	r3, [r7, #20]
   return(result);
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1e4      	bne.n	8003c20 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2202      	movs	r2, #2
 8003c5a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c60:	4619      	mov	r1, r3
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f88a 	bl	8003d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c68:	e063      	b.n	8003d32 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00e      	beq.n	8003c94 <HAL_UART_IRQHandler+0x5d8>
 8003c76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d008      	beq.n	8003c94 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003c8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 ffba 	bl	8004c06 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c92:	e051      	b.n	8003d38 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d014      	beq.n	8003cca <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ca4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d105      	bne.n	8003cb8 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003cac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cb0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d008      	beq.n	8003cca <HAL_UART_IRQHandler+0x60e>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d03a      	beq.n	8003d36 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	4798      	blx	r3
    }
    return;
 8003cc8:	e035      	b.n	8003d36 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d009      	beq.n	8003cea <HAL_UART_IRQHandler+0x62e>
 8003cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 ff64 	bl	8004bb0 <UART_EndTransmit_IT>
    return;
 8003ce8:	e026      	b.n	8003d38 <HAL_UART_IRQHandler+0x67c>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d009      	beq.n	8003d0a <HAL_UART_IRQHandler+0x64e>
 8003cf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cfa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 ff93 	bl	8004c2e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d08:	e016      	b.n	8003d38 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d010      	beq.n	8003d38 <HAL_UART_IRQHandler+0x67c>
 8003d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	da0c      	bge.n	8003d38 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 ff7b 	bl	8004c1a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d24:	e008      	b.n	8003d38 <HAL_UART_IRQHandler+0x67c>
      return;
 8003d26:	bf00      	nop
 8003d28:	e006      	b.n	8003d38 <HAL_UART_IRQHandler+0x67c>
    return;
 8003d2a:	bf00      	nop
 8003d2c:	e004      	b.n	8003d38 <HAL_UART_IRQHandler+0x67c>
      return;
 8003d2e:	bf00      	nop
 8003d30:	e002      	b.n	8003d38 <HAL_UART_IRQHandler+0x67c>
      return;
 8003d32:	bf00      	nop
 8003d34:	e000      	b.n	8003d38 <HAL_UART_IRQHandler+0x67c>
    return;
 8003d36:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8003d38:	37e8      	adds	r7, #232	@ 0xe8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop

08003d40 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	460b      	mov	r3, r1
 8003d86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d98:	b08c      	sub	sp, #48	@ 0x30
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	431a      	orrs	r2, r3
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	431a      	orrs	r2, r3
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	69db      	ldr	r3, [r3, #28]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	4baa      	ldr	r3, [pc, #680]	@ (800406c <UART_SetConfig+0x2d8>)
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	6812      	ldr	r2, [r2, #0]
 8003dca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003dcc:	430b      	orrs	r3, r1
 8003dce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a9f      	ldr	r2, [pc, #636]	@ (8004070 <UART_SetConfig+0x2dc>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d004      	beq.n	8003e00 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003e0a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	6812      	ldr	r2, [r2, #0]
 8003e12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e14:	430b      	orrs	r3, r1
 8003e16:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e1e:	f023 010f 	bic.w	r1, r3, #15
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a90      	ldr	r2, [pc, #576]	@ (8004074 <UART_SetConfig+0x2e0>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d125      	bne.n	8003e84 <UART_SetConfig+0xf0>
 8003e38:	4b8f      	ldr	r3, [pc, #572]	@ (8004078 <UART_SetConfig+0x2e4>)
 8003e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	2b03      	cmp	r3, #3
 8003e44:	d81a      	bhi.n	8003e7c <UART_SetConfig+0xe8>
 8003e46:	a201      	add	r2, pc, #4	@ (adr r2, 8003e4c <UART_SetConfig+0xb8>)
 8003e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4c:	08003e5d 	.word	0x08003e5d
 8003e50:	08003e6d 	.word	0x08003e6d
 8003e54:	08003e65 	.word	0x08003e65
 8003e58:	08003e75 	.word	0x08003e75
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e62:	e116      	b.n	8004092 <UART_SetConfig+0x2fe>
 8003e64:	2302      	movs	r3, #2
 8003e66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e6a:	e112      	b.n	8004092 <UART_SetConfig+0x2fe>
 8003e6c:	2304      	movs	r3, #4
 8003e6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e72:	e10e      	b.n	8004092 <UART_SetConfig+0x2fe>
 8003e74:	2308      	movs	r3, #8
 8003e76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e7a:	e10a      	b.n	8004092 <UART_SetConfig+0x2fe>
 8003e7c:	2310      	movs	r3, #16
 8003e7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e82:	e106      	b.n	8004092 <UART_SetConfig+0x2fe>
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a7c      	ldr	r2, [pc, #496]	@ (800407c <UART_SetConfig+0x2e8>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d138      	bne.n	8003f00 <UART_SetConfig+0x16c>
 8003e8e:	4b7a      	ldr	r3, [pc, #488]	@ (8004078 <UART_SetConfig+0x2e4>)
 8003e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e94:	f003 030c 	and.w	r3, r3, #12
 8003e98:	2b0c      	cmp	r3, #12
 8003e9a:	d82d      	bhi.n	8003ef8 <UART_SetConfig+0x164>
 8003e9c:	a201      	add	r2, pc, #4	@ (adr r2, 8003ea4 <UART_SetConfig+0x110>)
 8003e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea2:	bf00      	nop
 8003ea4:	08003ed9 	.word	0x08003ed9
 8003ea8:	08003ef9 	.word	0x08003ef9
 8003eac:	08003ef9 	.word	0x08003ef9
 8003eb0:	08003ef9 	.word	0x08003ef9
 8003eb4:	08003ee9 	.word	0x08003ee9
 8003eb8:	08003ef9 	.word	0x08003ef9
 8003ebc:	08003ef9 	.word	0x08003ef9
 8003ec0:	08003ef9 	.word	0x08003ef9
 8003ec4:	08003ee1 	.word	0x08003ee1
 8003ec8:	08003ef9 	.word	0x08003ef9
 8003ecc:	08003ef9 	.word	0x08003ef9
 8003ed0:	08003ef9 	.word	0x08003ef9
 8003ed4:	08003ef1 	.word	0x08003ef1
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ede:	e0d8      	b.n	8004092 <UART_SetConfig+0x2fe>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ee6:	e0d4      	b.n	8004092 <UART_SetConfig+0x2fe>
 8003ee8:	2304      	movs	r3, #4
 8003eea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003eee:	e0d0      	b.n	8004092 <UART_SetConfig+0x2fe>
 8003ef0:	2308      	movs	r3, #8
 8003ef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ef6:	e0cc      	b.n	8004092 <UART_SetConfig+0x2fe>
 8003ef8:	2310      	movs	r3, #16
 8003efa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003efe:	e0c8      	b.n	8004092 <UART_SetConfig+0x2fe>
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a5e      	ldr	r2, [pc, #376]	@ (8004080 <UART_SetConfig+0x2ec>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d125      	bne.n	8003f56 <UART_SetConfig+0x1c2>
 8003f0a:	4b5b      	ldr	r3, [pc, #364]	@ (8004078 <UART_SetConfig+0x2e4>)
 8003f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f10:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003f14:	2b30      	cmp	r3, #48	@ 0x30
 8003f16:	d016      	beq.n	8003f46 <UART_SetConfig+0x1b2>
 8003f18:	2b30      	cmp	r3, #48	@ 0x30
 8003f1a:	d818      	bhi.n	8003f4e <UART_SetConfig+0x1ba>
 8003f1c:	2b20      	cmp	r3, #32
 8003f1e:	d00a      	beq.n	8003f36 <UART_SetConfig+0x1a2>
 8003f20:	2b20      	cmp	r3, #32
 8003f22:	d814      	bhi.n	8003f4e <UART_SetConfig+0x1ba>
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d002      	beq.n	8003f2e <UART_SetConfig+0x19a>
 8003f28:	2b10      	cmp	r3, #16
 8003f2a:	d008      	beq.n	8003f3e <UART_SetConfig+0x1aa>
 8003f2c:	e00f      	b.n	8003f4e <UART_SetConfig+0x1ba>
 8003f2e:	2300      	movs	r3, #0
 8003f30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f34:	e0ad      	b.n	8004092 <UART_SetConfig+0x2fe>
 8003f36:	2302      	movs	r3, #2
 8003f38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f3c:	e0a9      	b.n	8004092 <UART_SetConfig+0x2fe>
 8003f3e:	2304      	movs	r3, #4
 8003f40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f44:	e0a5      	b.n	8004092 <UART_SetConfig+0x2fe>
 8003f46:	2308      	movs	r3, #8
 8003f48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f4c:	e0a1      	b.n	8004092 <UART_SetConfig+0x2fe>
 8003f4e:	2310      	movs	r3, #16
 8003f50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f54:	e09d      	b.n	8004092 <UART_SetConfig+0x2fe>
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a4a      	ldr	r2, [pc, #296]	@ (8004084 <UART_SetConfig+0x2f0>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d125      	bne.n	8003fac <UART_SetConfig+0x218>
 8003f60:	4b45      	ldr	r3, [pc, #276]	@ (8004078 <UART_SetConfig+0x2e4>)
 8003f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f66:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003f6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f6c:	d016      	beq.n	8003f9c <UART_SetConfig+0x208>
 8003f6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f70:	d818      	bhi.n	8003fa4 <UART_SetConfig+0x210>
 8003f72:	2b80      	cmp	r3, #128	@ 0x80
 8003f74:	d00a      	beq.n	8003f8c <UART_SetConfig+0x1f8>
 8003f76:	2b80      	cmp	r3, #128	@ 0x80
 8003f78:	d814      	bhi.n	8003fa4 <UART_SetConfig+0x210>
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d002      	beq.n	8003f84 <UART_SetConfig+0x1f0>
 8003f7e:	2b40      	cmp	r3, #64	@ 0x40
 8003f80:	d008      	beq.n	8003f94 <UART_SetConfig+0x200>
 8003f82:	e00f      	b.n	8003fa4 <UART_SetConfig+0x210>
 8003f84:	2300      	movs	r3, #0
 8003f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f8a:	e082      	b.n	8004092 <UART_SetConfig+0x2fe>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f92:	e07e      	b.n	8004092 <UART_SetConfig+0x2fe>
 8003f94:	2304      	movs	r3, #4
 8003f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f9a:	e07a      	b.n	8004092 <UART_SetConfig+0x2fe>
 8003f9c:	2308      	movs	r3, #8
 8003f9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fa2:	e076      	b.n	8004092 <UART_SetConfig+0x2fe>
 8003fa4:	2310      	movs	r3, #16
 8003fa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003faa:	e072      	b.n	8004092 <UART_SetConfig+0x2fe>
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a35      	ldr	r2, [pc, #212]	@ (8004088 <UART_SetConfig+0x2f4>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d12a      	bne.n	800400c <UART_SetConfig+0x278>
 8003fb6:	4b30      	ldr	r3, [pc, #192]	@ (8004078 <UART_SetConfig+0x2e4>)
 8003fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fbc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fc0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fc4:	d01a      	beq.n	8003ffc <UART_SetConfig+0x268>
 8003fc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fca:	d81b      	bhi.n	8004004 <UART_SetConfig+0x270>
 8003fcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fd0:	d00c      	beq.n	8003fec <UART_SetConfig+0x258>
 8003fd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fd6:	d815      	bhi.n	8004004 <UART_SetConfig+0x270>
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d003      	beq.n	8003fe4 <UART_SetConfig+0x250>
 8003fdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fe0:	d008      	beq.n	8003ff4 <UART_SetConfig+0x260>
 8003fe2:	e00f      	b.n	8004004 <UART_SetConfig+0x270>
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fea:	e052      	b.n	8004092 <UART_SetConfig+0x2fe>
 8003fec:	2302      	movs	r3, #2
 8003fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ff2:	e04e      	b.n	8004092 <UART_SetConfig+0x2fe>
 8003ff4:	2304      	movs	r3, #4
 8003ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ffa:	e04a      	b.n	8004092 <UART_SetConfig+0x2fe>
 8003ffc:	2308      	movs	r3, #8
 8003ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004002:	e046      	b.n	8004092 <UART_SetConfig+0x2fe>
 8004004:	2310      	movs	r3, #16
 8004006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800400a:	e042      	b.n	8004092 <UART_SetConfig+0x2fe>
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a17      	ldr	r2, [pc, #92]	@ (8004070 <UART_SetConfig+0x2dc>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d13a      	bne.n	800408c <UART_SetConfig+0x2f8>
 8004016:	4b18      	ldr	r3, [pc, #96]	@ (8004078 <UART_SetConfig+0x2e4>)
 8004018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800401c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004020:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004024:	d01a      	beq.n	800405c <UART_SetConfig+0x2c8>
 8004026:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800402a:	d81b      	bhi.n	8004064 <UART_SetConfig+0x2d0>
 800402c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004030:	d00c      	beq.n	800404c <UART_SetConfig+0x2b8>
 8004032:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004036:	d815      	bhi.n	8004064 <UART_SetConfig+0x2d0>
 8004038:	2b00      	cmp	r3, #0
 800403a:	d003      	beq.n	8004044 <UART_SetConfig+0x2b0>
 800403c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004040:	d008      	beq.n	8004054 <UART_SetConfig+0x2c0>
 8004042:	e00f      	b.n	8004064 <UART_SetConfig+0x2d0>
 8004044:	2300      	movs	r3, #0
 8004046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800404a:	e022      	b.n	8004092 <UART_SetConfig+0x2fe>
 800404c:	2302      	movs	r3, #2
 800404e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004052:	e01e      	b.n	8004092 <UART_SetConfig+0x2fe>
 8004054:	2304      	movs	r3, #4
 8004056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800405a:	e01a      	b.n	8004092 <UART_SetConfig+0x2fe>
 800405c:	2308      	movs	r3, #8
 800405e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004062:	e016      	b.n	8004092 <UART_SetConfig+0x2fe>
 8004064:	2310      	movs	r3, #16
 8004066:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800406a:	e012      	b.n	8004092 <UART_SetConfig+0x2fe>
 800406c:	cfff69f3 	.word	0xcfff69f3
 8004070:	40008000 	.word	0x40008000
 8004074:	40013800 	.word	0x40013800
 8004078:	40021000 	.word	0x40021000
 800407c:	40004400 	.word	0x40004400
 8004080:	40004800 	.word	0x40004800
 8004084:	40004c00 	.word	0x40004c00
 8004088:	40005000 	.word	0x40005000
 800408c:	2310      	movs	r3, #16
 800408e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4aae      	ldr	r2, [pc, #696]	@ (8004350 <UART_SetConfig+0x5bc>)
 8004098:	4293      	cmp	r3, r2
 800409a:	f040 8097 	bne.w	80041cc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800409e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80040a2:	2b08      	cmp	r3, #8
 80040a4:	d823      	bhi.n	80040ee <UART_SetConfig+0x35a>
 80040a6:	a201      	add	r2, pc, #4	@ (adr r2, 80040ac <UART_SetConfig+0x318>)
 80040a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ac:	080040d1 	.word	0x080040d1
 80040b0:	080040ef 	.word	0x080040ef
 80040b4:	080040d9 	.word	0x080040d9
 80040b8:	080040ef 	.word	0x080040ef
 80040bc:	080040df 	.word	0x080040df
 80040c0:	080040ef 	.word	0x080040ef
 80040c4:	080040ef 	.word	0x080040ef
 80040c8:	080040ef 	.word	0x080040ef
 80040cc:	080040e7 	.word	0x080040e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040d0:	f7fe fbc6 	bl	8002860 <HAL_RCC_GetPCLK1Freq>
 80040d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80040d6:	e010      	b.n	80040fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040d8:	4b9e      	ldr	r3, [pc, #632]	@ (8004354 <UART_SetConfig+0x5c0>)
 80040da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80040dc:	e00d      	b.n	80040fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040de:	f7fe fb27 	bl	8002730 <HAL_RCC_GetSysClockFreq>
 80040e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80040e4:	e009      	b.n	80040fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80040ec:	e005      	b.n	80040fa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80040ee:	2300      	movs	r3, #0
 80040f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80040f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80040fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 8130 	beq.w	8004362 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004106:	4a94      	ldr	r2, [pc, #592]	@ (8004358 <UART_SetConfig+0x5c4>)
 8004108:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800410c:	461a      	mov	r2, r3
 800410e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004110:	fbb3 f3f2 	udiv	r3, r3, r2
 8004114:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	4613      	mov	r3, r2
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	4413      	add	r3, r2
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	429a      	cmp	r2, r3
 8004124:	d305      	bcc.n	8004132 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	429a      	cmp	r2, r3
 8004130:	d903      	bls.n	800413a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004138:	e113      	b.n	8004362 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800413a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413c:	2200      	movs	r2, #0
 800413e:	60bb      	str	r3, [r7, #8]
 8004140:	60fa      	str	r2, [r7, #12]
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004146:	4a84      	ldr	r2, [pc, #528]	@ (8004358 <UART_SetConfig+0x5c4>)
 8004148:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800414c:	b29b      	uxth	r3, r3
 800414e:	2200      	movs	r2, #0
 8004150:	603b      	str	r3, [r7, #0]
 8004152:	607a      	str	r2, [r7, #4]
 8004154:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004158:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800415c:	f7fc f84e 	bl	80001fc <__aeabi_uldivmod>
 8004160:	4602      	mov	r2, r0
 8004162:	460b      	mov	r3, r1
 8004164:	4610      	mov	r0, r2
 8004166:	4619      	mov	r1, r3
 8004168:	f04f 0200 	mov.w	r2, #0
 800416c:	f04f 0300 	mov.w	r3, #0
 8004170:	020b      	lsls	r3, r1, #8
 8004172:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004176:	0202      	lsls	r2, r0, #8
 8004178:	6979      	ldr	r1, [r7, #20]
 800417a:	6849      	ldr	r1, [r1, #4]
 800417c:	0849      	lsrs	r1, r1, #1
 800417e:	2000      	movs	r0, #0
 8004180:	460c      	mov	r4, r1
 8004182:	4605      	mov	r5, r0
 8004184:	eb12 0804 	adds.w	r8, r2, r4
 8004188:	eb43 0905 	adc.w	r9, r3, r5
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	469a      	mov	sl, r3
 8004194:	4693      	mov	fp, r2
 8004196:	4652      	mov	r2, sl
 8004198:	465b      	mov	r3, fp
 800419a:	4640      	mov	r0, r8
 800419c:	4649      	mov	r1, r9
 800419e:	f7fc f82d 	bl	80001fc <__aeabi_uldivmod>
 80041a2:	4602      	mov	r2, r0
 80041a4:	460b      	mov	r3, r1
 80041a6:	4613      	mov	r3, r2
 80041a8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041b0:	d308      	bcc.n	80041c4 <UART_SetConfig+0x430>
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041b8:	d204      	bcs.n	80041c4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6a3a      	ldr	r2, [r7, #32]
 80041c0:	60da      	str	r2, [r3, #12]
 80041c2:	e0ce      	b.n	8004362 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80041ca:	e0ca      	b.n	8004362 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	69db      	ldr	r3, [r3, #28]
 80041d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041d4:	d166      	bne.n	80042a4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80041d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80041da:	2b08      	cmp	r3, #8
 80041dc:	d827      	bhi.n	800422e <UART_SetConfig+0x49a>
 80041de:	a201      	add	r2, pc, #4	@ (adr r2, 80041e4 <UART_SetConfig+0x450>)
 80041e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e4:	08004209 	.word	0x08004209
 80041e8:	08004211 	.word	0x08004211
 80041ec:	08004219 	.word	0x08004219
 80041f0:	0800422f 	.word	0x0800422f
 80041f4:	0800421f 	.word	0x0800421f
 80041f8:	0800422f 	.word	0x0800422f
 80041fc:	0800422f 	.word	0x0800422f
 8004200:	0800422f 	.word	0x0800422f
 8004204:	08004227 	.word	0x08004227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004208:	f7fe fb2a 	bl	8002860 <HAL_RCC_GetPCLK1Freq>
 800420c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800420e:	e014      	b.n	800423a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004210:	f7fe fb3c 	bl	800288c <HAL_RCC_GetPCLK2Freq>
 8004214:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004216:	e010      	b.n	800423a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004218:	4b4e      	ldr	r3, [pc, #312]	@ (8004354 <UART_SetConfig+0x5c0>)
 800421a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800421c:	e00d      	b.n	800423a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800421e:	f7fe fa87 	bl	8002730 <HAL_RCC_GetSysClockFreq>
 8004222:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004224:	e009      	b.n	800423a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004226:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800422a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800422c:	e005      	b.n	800423a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800422e:	2300      	movs	r3, #0
 8004230:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004238:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800423a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 8090 	beq.w	8004362 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004246:	4a44      	ldr	r2, [pc, #272]	@ (8004358 <UART_SetConfig+0x5c4>)
 8004248:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800424c:	461a      	mov	r2, r3
 800424e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004250:	fbb3 f3f2 	udiv	r3, r3, r2
 8004254:	005a      	lsls	r2, r3, #1
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	085b      	lsrs	r3, r3, #1
 800425c:	441a      	add	r2, r3
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	fbb2 f3f3 	udiv	r3, r2, r3
 8004266:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004268:	6a3b      	ldr	r3, [r7, #32]
 800426a:	2b0f      	cmp	r3, #15
 800426c:	d916      	bls.n	800429c <UART_SetConfig+0x508>
 800426e:	6a3b      	ldr	r3, [r7, #32]
 8004270:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004274:	d212      	bcs.n	800429c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004276:	6a3b      	ldr	r3, [r7, #32]
 8004278:	b29b      	uxth	r3, r3
 800427a:	f023 030f 	bic.w	r3, r3, #15
 800427e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	085b      	lsrs	r3, r3, #1
 8004284:	b29b      	uxth	r3, r3
 8004286:	f003 0307 	and.w	r3, r3, #7
 800428a:	b29a      	uxth	r2, r3
 800428c:	8bfb      	ldrh	r3, [r7, #30]
 800428e:	4313      	orrs	r3, r2
 8004290:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	8bfa      	ldrh	r2, [r7, #30]
 8004298:	60da      	str	r2, [r3, #12]
 800429a:	e062      	b.n	8004362 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80042a2:	e05e      	b.n	8004362 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042a4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80042a8:	2b08      	cmp	r3, #8
 80042aa:	d828      	bhi.n	80042fe <UART_SetConfig+0x56a>
 80042ac:	a201      	add	r2, pc, #4	@ (adr r2, 80042b4 <UART_SetConfig+0x520>)
 80042ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b2:	bf00      	nop
 80042b4:	080042d9 	.word	0x080042d9
 80042b8:	080042e1 	.word	0x080042e1
 80042bc:	080042e9 	.word	0x080042e9
 80042c0:	080042ff 	.word	0x080042ff
 80042c4:	080042ef 	.word	0x080042ef
 80042c8:	080042ff 	.word	0x080042ff
 80042cc:	080042ff 	.word	0x080042ff
 80042d0:	080042ff 	.word	0x080042ff
 80042d4:	080042f7 	.word	0x080042f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042d8:	f7fe fac2 	bl	8002860 <HAL_RCC_GetPCLK1Freq>
 80042dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80042de:	e014      	b.n	800430a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042e0:	f7fe fad4 	bl	800288c <HAL_RCC_GetPCLK2Freq>
 80042e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80042e6:	e010      	b.n	800430a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042e8:	4b1a      	ldr	r3, [pc, #104]	@ (8004354 <UART_SetConfig+0x5c0>)
 80042ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80042ec:	e00d      	b.n	800430a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042ee:	f7fe fa1f 	bl	8002730 <HAL_RCC_GetSysClockFreq>
 80042f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80042f4:	e009      	b.n	800430a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80042fc:	e005      	b.n	800430a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80042fe:	2300      	movs	r3, #0
 8004300:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004308:	bf00      	nop
    }

    if (pclk != 0U)
 800430a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430c:	2b00      	cmp	r3, #0
 800430e:	d028      	beq.n	8004362 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004314:	4a10      	ldr	r2, [pc, #64]	@ (8004358 <UART_SetConfig+0x5c4>)
 8004316:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800431a:	461a      	mov	r2, r3
 800431c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	085b      	lsrs	r3, r3, #1
 8004328:	441a      	add	r2, r3
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004332:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	2b0f      	cmp	r3, #15
 8004338:	d910      	bls.n	800435c <UART_SetConfig+0x5c8>
 800433a:	6a3b      	ldr	r3, [r7, #32]
 800433c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004340:	d20c      	bcs.n	800435c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	b29a      	uxth	r2, r3
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	60da      	str	r2, [r3, #12]
 800434c:	e009      	b.n	8004362 <UART_SetConfig+0x5ce>
 800434e:	bf00      	nop
 8004350:	40008000 	.word	0x40008000
 8004354:	00f42400 	.word	0x00f42400
 8004358:	08004f00 	.word	0x08004f00
      }
      else
      {
        ret = HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2201      	movs	r2, #1
 8004366:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	2201      	movs	r2, #1
 800436e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	2200      	movs	r2, #0
 8004376:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	2200      	movs	r2, #0
 800437c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800437e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004382:	4618      	mov	r0, r3
 8004384:	3730      	adds	r7, #48	@ 0x30
 8004386:	46bd      	mov	sp, r7
 8004388:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800438c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004398:	f003 0308 	and.w	r3, r3, #8
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00a      	beq.n	80043b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00a      	beq.n	80043d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	430a      	orrs	r2, r1
 80043d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00a      	beq.n	80043fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	430a      	orrs	r2, r1
 80043f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043fe:	f003 0304 	and.w	r3, r3, #4
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00a      	beq.n	800441c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	430a      	orrs	r2, r1
 800441a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004420:	f003 0310 	and.w	r3, r3, #16
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00a      	beq.n	800443e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004442:	f003 0320 	and.w	r3, r3, #32
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00a      	beq.n	8004460 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004468:	2b00      	cmp	r3, #0
 800446a:	d01a      	beq.n	80044a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004486:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800448a:	d10a      	bne.n	80044a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00a      	beq.n	80044c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	605a      	str	r2, [r3, #4]
  }
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b098      	sub	sp, #96	@ 0x60
 80044d4:	af02      	add	r7, sp, #8
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044e0:	f7fc fd20 	bl	8000f24 <HAL_GetTick>
 80044e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0308 	and.w	r3, r3, #8
 80044f0:	2b08      	cmp	r3, #8
 80044f2:	d12f      	bne.n	8004554 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044fc:	2200      	movs	r2, #0
 80044fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f88e 	bl	8004624 <UART_WaitOnFlagUntilTimeout>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d022      	beq.n	8004554 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004516:	e853 3f00 	ldrex	r3, [r3]
 800451a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800451c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800451e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004522:	653b      	str	r3, [r7, #80]	@ 0x50
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	461a      	mov	r2, r3
 800452a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800452c:	647b      	str	r3, [r7, #68]	@ 0x44
 800452e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004530:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004532:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004534:	e841 2300 	strex	r3, r2, [r1]
 8004538:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800453a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1e6      	bne.n	800450e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2220      	movs	r2, #32
 8004544:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e063      	b.n	800461c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	2b04      	cmp	r3, #4
 8004560:	d149      	bne.n	80045f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004562:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800456a:	2200      	movs	r2, #0
 800456c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f857 	bl	8004624 <UART_WaitOnFlagUntilTimeout>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d03c      	beq.n	80045f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004584:	e853 3f00 	ldrex	r3, [r3]
 8004588:	623b      	str	r3, [r7, #32]
   return(result);
 800458a:	6a3b      	ldr	r3, [r7, #32]
 800458c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004590:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	461a      	mov	r2, r3
 8004598:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800459a:	633b      	str	r3, [r7, #48]	@ 0x30
 800459c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045a2:	e841 2300 	strex	r3, r2, [r1]
 80045a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80045a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1e6      	bne.n	800457c <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	3308      	adds	r3, #8
 80045b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	e853 3f00 	ldrex	r3, [r3]
 80045bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f023 0301 	bic.w	r3, r3, #1
 80045c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	3308      	adds	r3, #8
 80045cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045ce:	61fa      	str	r2, [r7, #28]
 80045d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d2:	69b9      	ldr	r1, [r7, #24]
 80045d4:	69fa      	ldr	r2, [r7, #28]
 80045d6:	e841 2300 	strex	r3, r2, [r1]
 80045da:	617b      	str	r3, [r7, #20]
   return(result);
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1e5      	bne.n	80045ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2220      	movs	r2, #32
 80045e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e012      	b.n	800461c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2220      	movs	r2, #32
 80045fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2220      	movs	r2, #32
 8004602:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3758      	adds	r7, #88	@ 0x58
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	603b      	str	r3, [r7, #0]
 8004630:	4613      	mov	r3, r2
 8004632:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004634:	e04f      	b.n	80046d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800463c:	d04b      	beq.n	80046d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800463e:	f7fc fc71 	bl	8000f24 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	429a      	cmp	r2, r3
 800464c:	d302      	bcc.n	8004654 <UART_WaitOnFlagUntilTimeout+0x30>
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d101      	bne.n	8004658 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e04e      	b.n	80046f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0304 	and.w	r3, r3, #4
 8004662:	2b00      	cmp	r3, #0
 8004664:	d037      	beq.n	80046d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	2b80      	cmp	r3, #128	@ 0x80
 800466a:	d034      	beq.n	80046d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	2b40      	cmp	r3, #64	@ 0x40
 8004670:	d031      	beq.n	80046d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	69db      	ldr	r3, [r3, #28]
 8004678:	f003 0308 	and.w	r3, r3, #8
 800467c:	2b08      	cmp	r3, #8
 800467e:	d110      	bne.n	80046a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2208      	movs	r2, #8
 8004686:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f000 f920 	bl	80048ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2208      	movs	r2, #8
 8004692:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e029      	b.n	80046f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	69db      	ldr	r3, [r3, #28]
 80046a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046b0:	d111      	bne.n	80046d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80046ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f000 f906 	bl	80048ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2220      	movs	r2, #32
 80046c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e00f      	b.n	80046f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	69da      	ldr	r2, [r3, #28]
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	4013      	ands	r3, r2
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	bf0c      	ite	eq
 80046e6:	2301      	moveq	r3, #1
 80046e8:	2300      	movne	r3, #0
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	461a      	mov	r2, r3
 80046ee:	79fb      	ldrb	r3, [r7, #7]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d0a0      	beq.n	8004636 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
	...

08004700 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b096      	sub	sp, #88	@ 0x58
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	4613      	mov	r3, r2
 800470c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	88fa      	ldrh	r2, [r7, #6]
 8004718:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2222      	movs	r2, #34	@ 0x22
 8004728:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004732:	2b00      	cmp	r3, #0
 8004734:	d02d      	beq.n	8004792 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800473c:	4a40      	ldr	r2, [pc, #256]	@ (8004840 <UART_Start_Receive_DMA+0x140>)
 800473e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004746:	4a3f      	ldr	r2, [pc, #252]	@ (8004844 <UART_Start_Receive_DMA+0x144>)
 8004748:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004750:	4a3d      	ldr	r2, [pc, #244]	@ (8004848 <UART_Start_Receive_DMA+0x148>)
 8004752:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800475a:	2200      	movs	r2, #0
 800475c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	3324      	adds	r3, #36	@ 0x24
 800476a:	4619      	mov	r1, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004770:	461a      	mov	r2, r3
 8004772:	88fb      	ldrh	r3, [r7, #6]
 8004774:	f7fc fd9c 	bl	80012b0 <HAL_DMA_Start_IT>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d009      	beq.n	8004792 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2210      	movs	r2, #16
 8004782:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2220      	movs	r2, #32
 800478a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e051      	b.n	8004836 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d018      	beq.n	80047cc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047a2:	e853 3f00 	ldrex	r3, [r3]
 80047a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80047a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	461a      	mov	r2, r3
 80047b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047ba:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047bc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80047be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047c0:	e841 2300 	strex	r3, r2, [r1]
 80047c4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80047c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1e6      	bne.n	800479a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3308      	adds	r3, #8
 80047d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d6:	e853 3f00 	ldrex	r3, [r3]
 80047da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80047dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047de:	f043 0301 	orr.w	r3, r3, #1
 80047e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3308      	adds	r3, #8
 80047ea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80047ec:	637a      	str	r2, [r7, #52]	@ 0x34
 80047ee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80047f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80047f4:	e841 2300 	strex	r3, r2, [r1]
 80047f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80047fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1e5      	bne.n	80047cc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3308      	adds	r3, #8
 8004806:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	e853 3f00 	ldrex	r3, [r3]
 800480e:	613b      	str	r3, [r7, #16]
   return(result);
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004816:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3308      	adds	r3, #8
 800481e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004820:	623a      	str	r2, [r7, #32]
 8004822:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004824:	69f9      	ldr	r1, [r7, #28]
 8004826:	6a3a      	ldr	r2, [r7, #32]
 8004828:	e841 2300 	strex	r3, r2, [r1]
 800482c:	61bb      	str	r3, [r7, #24]
   return(result);
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1e5      	bne.n	8004800 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3758      	adds	r7, #88	@ 0x58
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	0800499b 	.word	0x0800499b
 8004844:	08004ac7 	.word	0x08004ac7
 8004848:	08004b05 	.word	0x08004b05

0800484c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800484c:	b480      	push	{r7}
 800484e:	b08f      	sub	sp, #60	@ 0x3c
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	e853 3f00 	ldrex	r3, [r3]
 8004860:	61fb      	str	r3, [r7, #28]
   return(result);
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004868:	637b      	str	r3, [r7, #52]	@ 0x34
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	461a      	mov	r2, r3
 8004870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004872:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004874:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004876:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004878:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800487a:	e841 2300 	strex	r3, r2, [r1]
 800487e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1e6      	bne.n	8004854 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	3308      	adds	r3, #8
 800488c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	e853 3f00 	ldrex	r3, [r3]
 8004894:	60bb      	str	r3, [r7, #8]
   return(result);
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800489c:	633b      	str	r3, [r7, #48]	@ 0x30
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	3308      	adds	r3, #8
 80048a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048a6:	61ba      	str	r2, [r7, #24]
 80048a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048aa:	6979      	ldr	r1, [r7, #20]
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	e841 2300 	strex	r3, r2, [r1]
 80048b2:	613b      	str	r3, [r7, #16]
   return(result);
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1e5      	bne.n	8004886 <UART_EndTxTransfer+0x3a>
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2220      	movs	r2, #32
 80048be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80048c2:	bf00      	nop
 80048c4:	373c      	adds	r7, #60	@ 0x3c
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b095      	sub	sp, #84	@ 0x54
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048de:	e853 3f00 	ldrex	r3, [r3]
 80048e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80048e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	461a      	mov	r2, r3
 80048f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80048f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80048fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048fc:	e841 2300 	strex	r3, r2, [r1]
 8004900:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1e6      	bne.n	80048d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3308      	adds	r3, #8
 800490e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004910:	6a3b      	ldr	r3, [r7, #32]
 8004912:	e853 3f00 	ldrex	r3, [r3]
 8004916:	61fb      	str	r3, [r7, #28]
   return(result);
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800491e:	f023 0301 	bic.w	r3, r3, #1
 8004922:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	3308      	adds	r3, #8
 800492a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800492c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800492e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004930:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004932:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004934:	e841 2300 	strex	r3, r2, [r1]
 8004938:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800493a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1e3      	bne.n	8004908 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004944:	2b01      	cmp	r3, #1
 8004946:	d118      	bne.n	800497a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	e853 3f00 	ldrex	r3, [r3]
 8004954:	60bb      	str	r3, [r7, #8]
   return(result);
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	f023 0310 	bic.w	r3, r3, #16
 800495c:	647b      	str	r3, [r7, #68]	@ 0x44
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	461a      	mov	r2, r3
 8004964:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004966:	61bb      	str	r3, [r7, #24]
 8004968:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496a:	6979      	ldr	r1, [r7, #20]
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	e841 2300 	strex	r3, r2, [r1]
 8004972:	613b      	str	r3, [r7, #16]
   return(result);
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1e6      	bne.n	8004948 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2220      	movs	r2, #32
 800497e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800498e:	bf00      	nop
 8004990:	3754      	adds	r7, #84	@ 0x54
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b09c      	sub	sp, #112	@ 0x70
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0320 	and.w	r3, r3, #32
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d171      	bne.n	8004a9a <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80049b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049b8:	2200      	movs	r2, #0
 80049ba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049c6:	e853 3f00 	ldrex	r3, [r3]
 80049ca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80049cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049d2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	461a      	mov	r2, r3
 80049da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80049dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80049de:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80049e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80049e4:	e841 2300 	strex	r3, r2, [r1]
 80049e8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80049ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1e6      	bne.n	80049be <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	3308      	adds	r3, #8
 80049f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049fa:	e853 3f00 	ldrex	r3, [r3]
 80049fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a02:	f023 0301 	bic.w	r3, r3, #1
 8004a06:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	3308      	adds	r3, #8
 8004a0e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004a10:	647a      	str	r2, [r7, #68]	@ 0x44
 8004a12:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a18:	e841 2300 	strex	r3, r2, [r1]
 8004a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1e5      	bne.n	80049f0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	3308      	adds	r3, #8
 8004a2a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2e:	e853 3f00 	ldrex	r3, [r3]
 8004a32:	623b      	str	r3, [r7, #32]
   return(result);
 8004a34:	6a3b      	ldr	r3, [r7, #32]
 8004a36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a3a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	3308      	adds	r3, #8
 8004a42:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004a44:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a4c:	e841 2300 	strex	r3, r2, [r1]
 8004a50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1e5      	bne.n	8004a24 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004a58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d118      	bne.n	8004a9a <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	e853 3f00 	ldrex	r3, [r3]
 8004a74:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f023 0310 	bic.w	r3, r3, #16
 8004a7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	461a      	mov	r2, r3
 8004a84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a86:	61fb      	str	r3, [r7, #28]
 8004a88:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8a:	69b9      	ldr	r1, [r7, #24]
 8004a8c:	69fa      	ldr	r2, [r7, #28]
 8004a8e:	e841 2300 	strex	r3, r2, [r1]
 8004a92:	617b      	str	r3, [r7, #20]
   return(result);
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1e6      	bne.n	8004a68 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004aa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d107      	bne.n	8004ab8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004aa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004aaa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004aae:	4619      	mov	r1, r3
 8004ab0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004ab2:	f7ff f963 	bl	8003d7c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ab6:	e002      	b.n	8004abe <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004ab8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004aba:	f7fb fd35 	bl	8000528 <HAL_UART_RxCpltCallback>
}
 8004abe:	bf00      	nop
 8004ac0:	3770      	adds	r7, #112	@ 0x70
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b084      	sub	sp, #16
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d109      	bne.n	8004af6 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004ae8:	085b      	lsrs	r3, r3, #1
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	4619      	mov	r1, r3
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f7ff f944 	bl	8003d7c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004af4:	e002      	b.n	8004afc <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f7ff f92c 	bl	8003d54 <HAL_UART_RxHalfCpltCallback>
}
 8004afc:	bf00      	nop
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b10:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b18:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b20:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b2c:	2b80      	cmp	r3, #128	@ 0x80
 8004b2e:	d109      	bne.n	8004b44 <UART_DMAError+0x40>
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	2b21      	cmp	r3, #33	@ 0x21
 8004b34:	d106      	bne.n	8004b44 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8004b3e:	6978      	ldr	r0, [r7, #20]
 8004b40:	f7ff fe84 	bl	800484c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b4e:	2b40      	cmp	r3, #64	@ 0x40
 8004b50:	d109      	bne.n	8004b66 <UART_DMAError+0x62>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2b22      	cmp	r3, #34	@ 0x22
 8004b56:	d106      	bne.n	8004b66 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8004b60:	6978      	ldr	r0, [r7, #20]
 8004b62:	f7ff feb4 	bl	80048ce <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b6c:	f043 0210 	orr.w	r2, r3, #16
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b76:	6978      	ldr	r0, [r7, #20]
 8004b78:	f7ff f8f6 	bl	8003d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b7c:	bf00      	nop
 8004b7e:	3718      	adds	r7, #24
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f7ff f8e0 	bl	8003d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ba8:	bf00      	nop
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b088      	sub	sp, #32
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	e853 3f00 	ldrex	r3, [r3]
 8004bc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bcc:	61fb      	str	r3, [r7, #28]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	61bb      	str	r3, [r7, #24]
 8004bd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bda:	6979      	ldr	r1, [r7, #20]
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	e841 2300 	strex	r3, r2, [r1]
 8004be2:	613b      	str	r3, [r7, #16]
   return(result);
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1e6      	bne.n	8004bb8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2220      	movs	r2, #32
 8004bee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f7ff f8a1 	bl	8003d40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bfe:	bf00      	nop
 8004c00:	3720      	adds	r7, #32
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b083      	sub	sp, #12
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004c0e:	bf00      	nop
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b083      	sub	sp, #12
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004c22:	bf00      	nop
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b083      	sub	sp, #12
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004c36:	bf00      	nop
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004c42:	b480      	push	{r7}
 8004c44:	b085      	sub	sp, #20
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d101      	bne.n	8004c58 <HAL_UARTEx_DisableFifoMode+0x16>
 8004c54:	2302      	movs	r3, #2
 8004c56:	e027      	b.n	8004ca8 <HAL_UARTEx_DisableFifoMode+0x66>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2224      	movs	r2, #36	@ 0x24
 8004c64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0201 	bic.w	r2, r2, #1
 8004c7e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004c86:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2220      	movs	r2, #32
 8004c9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3714      	adds	r7, #20
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d101      	bne.n	8004ccc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004cc8:	2302      	movs	r3, #2
 8004cca:	e02d      	b.n	8004d28 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2224      	movs	r2, #36	@ 0x24
 8004cd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 0201 	bic.w	r2, r2, #1
 8004cf2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	430a      	orrs	r2, r1
 8004d06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 f84f 	bl	8004dac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d101      	bne.n	8004d48 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004d44:	2302      	movs	r3, #2
 8004d46:	e02d      	b.n	8004da4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2224      	movs	r2, #36	@ 0x24
 8004d54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 0201 	bic.w	r2, r2, #1
 8004d6e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f811 	bl	8004dac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d108      	bne.n	8004dce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004dcc:	e031      	b.n	8004e32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004dce:	2308      	movs	r3, #8
 8004dd0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004dd2:	2308      	movs	r3, #8
 8004dd4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	0e5b      	lsrs	r3, r3, #25
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	f003 0307 	and.w	r3, r3, #7
 8004de4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	0f5b      	lsrs	r3, r3, #29
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	f003 0307 	and.w	r3, r3, #7
 8004df4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004df6:	7bbb      	ldrb	r3, [r7, #14]
 8004df8:	7b3a      	ldrb	r2, [r7, #12]
 8004dfa:	4911      	ldr	r1, [pc, #68]	@ (8004e40 <UARTEx_SetNbDataToProcess+0x94>)
 8004dfc:	5c8a      	ldrb	r2, [r1, r2]
 8004dfe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004e02:	7b3a      	ldrb	r2, [r7, #12]
 8004e04:	490f      	ldr	r1, [pc, #60]	@ (8004e44 <UARTEx_SetNbDataToProcess+0x98>)
 8004e06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e08:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
 8004e16:	7b7a      	ldrb	r2, [r7, #13]
 8004e18:	4909      	ldr	r1, [pc, #36]	@ (8004e40 <UARTEx_SetNbDataToProcess+0x94>)
 8004e1a:	5c8a      	ldrb	r2, [r1, r2]
 8004e1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004e20:	7b7a      	ldrb	r2, [r7, #13]
 8004e22:	4908      	ldr	r1, [pc, #32]	@ (8004e44 <UARTEx_SetNbDataToProcess+0x98>)
 8004e24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e26:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004e32:	bf00      	nop
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	08004f18 	.word	0x08004f18
 8004e44:	08004f20 	.word	0x08004f20

08004e48 <memset>:
 8004e48:	4402      	add	r2, r0
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d100      	bne.n	8004e52 <memset+0xa>
 8004e50:	4770      	bx	lr
 8004e52:	f803 1b01 	strb.w	r1, [r3], #1
 8004e56:	e7f9      	b.n	8004e4c <memset+0x4>

08004e58 <__libc_init_array>:
 8004e58:	b570      	push	{r4, r5, r6, lr}
 8004e5a:	4d0d      	ldr	r5, [pc, #52]	@ (8004e90 <__libc_init_array+0x38>)
 8004e5c:	4c0d      	ldr	r4, [pc, #52]	@ (8004e94 <__libc_init_array+0x3c>)
 8004e5e:	1b64      	subs	r4, r4, r5
 8004e60:	10a4      	asrs	r4, r4, #2
 8004e62:	2600      	movs	r6, #0
 8004e64:	42a6      	cmp	r6, r4
 8004e66:	d109      	bne.n	8004e7c <__libc_init_array+0x24>
 8004e68:	4d0b      	ldr	r5, [pc, #44]	@ (8004e98 <__libc_init_array+0x40>)
 8004e6a:	4c0c      	ldr	r4, [pc, #48]	@ (8004e9c <__libc_init_array+0x44>)
 8004e6c:	f000 f818 	bl	8004ea0 <_init>
 8004e70:	1b64      	subs	r4, r4, r5
 8004e72:	10a4      	asrs	r4, r4, #2
 8004e74:	2600      	movs	r6, #0
 8004e76:	42a6      	cmp	r6, r4
 8004e78:	d105      	bne.n	8004e86 <__libc_init_array+0x2e>
 8004e7a:	bd70      	pop	{r4, r5, r6, pc}
 8004e7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e80:	4798      	blx	r3
 8004e82:	3601      	adds	r6, #1
 8004e84:	e7ee      	b.n	8004e64 <__libc_init_array+0xc>
 8004e86:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e8a:	4798      	blx	r3
 8004e8c:	3601      	adds	r6, #1
 8004e8e:	e7f2      	b.n	8004e76 <__libc_init_array+0x1e>
 8004e90:	08004f30 	.word	0x08004f30
 8004e94:	08004f30 	.word	0x08004f30
 8004e98:	08004f30 	.word	0x08004f30
 8004e9c:	08004f34 	.word	0x08004f34

08004ea0 <_init>:
 8004ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea2:	bf00      	nop
 8004ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ea6:	bc08      	pop	{r3}
 8004ea8:	469e      	mov	lr, r3
 8004eaa:	4770      	bx	lr

08004eac <_fini>:
 8004eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eae:	bf00      	nop
 8004eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eb2:	bc08      	pop	{r3}
 8004eb4:	469e      	mov	lr, r3
 8004eb6:	4770      	bx	lr
